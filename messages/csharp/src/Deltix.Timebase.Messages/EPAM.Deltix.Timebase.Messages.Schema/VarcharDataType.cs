//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using EPAM.Deltix.Timebase.Messages;
using System;


namespace EPAM.Deltix.Timebase.Messages.Schema
{
    
    
    /// <summary>
    /// Schema definition of varchar data type.
    /// </summary>
    [SchemaElement(Name="com.epam.deltix.timebase.messages.schema.VarcharDataType", Title="VarcharDataType", Description=null)]
    public class VarcharDataType : DataType, IVarcharDataTypeInterface
    {
        
        public new static string ClassName = "com.epam.deltix.timebase.messages.schema.VarcharDataType";
        
        private SByte _isMultiline = TypeConstants.BooleanNull;
        
        private UInt32 _encodingType = UInt32.MinValue;
        
        private UInt32 _length = UInt32.MinValue;
        
        /// <summary>
        /// Creates an instance of VarcharDataType object.
        /// </summary>
        public VarcharDataType()
        {
        }
        
        #region Properties
        /// <summary>
        /// True, if field allows line breaks.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaType(Encoding=null, IsNullable=true, DataType=SchemaDataType.Default, Minimum=null, Maximum=null, NestedTypes=new Type[0])]
        public virtual Boolean IsMultiline
        {
            get
            {
                if ((this._isMultiline == TypeConstants.BooleanTrue))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            set
            {
                if ((value == true))
                {
                    this._isMultiline = TypeConstants.BooleanTrue;
                }
                else
                {
                    this._isMultiline = TypeConstants.BooleanFalse;
                }
            }
        }
        
        /// <summary>
        /// Encoding type.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaType(Encoding=null, IsNullable=true, DataType=SchemaDataType.Default, Minimum=null, Maximum=null, NestedTypes=new Type[0])]
        public virtual UInt32 EncodingType
        {
            get
            {
                return this._encodingType;
            }
            set
            {
                this._encodingType = value;
            }
        }
        
        /// <summary>
        /// Length.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaType(Encoding=null, IsNullable=true, DataType=SchemaDataType.Default, Minimum=null, Maximum=null, NestedTypes=new Type[0])]
        public virtual UInt32 Length
        {
            get
            {
                return this._length;
            }
            set
            {
                this._length = value;
            }
        }
        #endregion
        
        #region Property Helpers
        /// <summary>
        /// Flag that indicates whether property IsMultiline has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasIsMultiline()
        {
            return (this._isMultiline != TypeConstants.BooleanNull);
        }
        
        /// <summary>
        /// Sets null to IsMultiline property.
        /// </summary>
        public void NullifyIsMultiline()
        {
            this._isMultiline = TypeConstants.BooleanNull;
        }
        
        /// <summary>
        /// Flag that indicates whether property EncodingType has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasEncodingType()
        {
            return (this._encodingType != UInt32.MinValue);
        }
        
        /// <summary>
        /// Sets null to EncodingType property.
        /// </summary>
        public void NullifyEncodingType()
        {
            this._encodingType = UInt32.MinValue;
        }
        
        /// <summary>
        /// Flag that indicates whether property Length has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasLength()
        {
            return (this._length != UInt32.MinValue);
        }
        
        /// <summary>
        /// Sets null to Length property.
        /// </summary>
        public void NullifyLength()
        {
            this._length = UInt32.MinValue;
        }
        #endregion
        
        #region Message Methods
        /// <summary>
        /// Creates a new instance of message.
        /// <returns>New instance of message of the same type as this.</returns>
        /// </summary>
        protected override IRecordInterface CreateInstance()
        {
            return new VarcharDataType();
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        IVarcharDataTypeInfo IVarcharDataTypeInfo.Clone()
        {
            return ((IVarcharDataTypeInfo)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        IVarcharDataTypeInterface IVarcharDataTypeInterface.Clone()
        {
            return ((IVarcharDataTypeInterface)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        public new VarcharDataType Clone()
        {
            return ((VarcharDataType)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        protected override IRecordInterface CopyFromImpl(IRecordInfo source)
        {
            base.CopyFromImpl(source);
            if (typeof(IVarcharDataTypeInfo).IsInstanceOfType(source))
            {
                IVarcharDataTypeInfo typedSource = ((IVarcharDataTypeInfo)(source));
                if ((typedSource.HasIsMultiline() == true))
                {
                    this.IsMultiline = typedSource.IsMultiline;
                }
                else
                {
                    this.NullifyIsMultiline();
                }
                this.EncodingType = typedSource.EncodingType;
                this.Length = typedSource.Length;
            }
            return this;
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        IVarcharDataTypeInterface IVarcharDataTypeInterface.CopyFrom(IRecordInfo source)
        {
            return ((IVarcharDataTypeInterface)(this.CopyFromImpl(source)));
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        public new VarcharDataType CopyFrom(IRecordInfo source)
        {
            return ((VarcharDataType)(this.CopyFromImpl(source)));
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        protected override IRecordInterface NullifyImpl()
        {
            base.NullifyImpl();
            this.NullifyIsMultiline();
            this.NullifyEncodingType();
            this.NullifyLength();
            return this;
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        IVarcharDataTypeInterface IVarcharDataTypeInterface.Nullify()
        {
            return ((IVarcharDataTypeInterface)(this.NullifyImpl()));
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        public new VarcharDataType Nullify()
        {
            return ((VarcharDataType)(this.NullifyImpl()));
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        protected override IRecordInterface ResetImpl()
        {
            base.ResetImpl();
            this._isMultiline = TypeConstants.BooleanNull;
            this._encodingType = UInt32.MinValue;
            this._length = UInt32.MinValue;
            return this;
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        IVarcharDataTypeInterface IVarcharDataTypeInterface.Reset()
        {
            return ((IVarcharDataTypeInterface)(this.ResetImpl()));
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        public new VarcharDataType Reset()
        {
            return ((VarcharDataType)(this.ResetImpl()));
        }
        #endregion
        
        #region Standard Methods
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public virtual bool Equals(VarcharDataType obj)
        {
            if ((obj == null))
            {
                return false;
            }
            if (((this.HasIsMultiline() != obj.HasIsMultiline()) 
                        || (this.IsMultiline != obj.IsMultiline)))
            {
                return false;
            }
            if ((this.EncodingType != obj.EncodingType))
            {
                return false;
            }
            if ((this.Length != obj.Length))
            {
                return false;
            }
            return base.Equals(obj);
        }
        
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public override bool Equals(object obj)
        {
            if ((typeof(VarcharDataType).IsInstanceOfType(obj) == false))
            {
                return false;
            }
            return this.Equals(((VarcharDataType)(obj)));
        }
        
        /// <summary>
        /// Calculates a hash code for the current object.
        /// <returns>A hash code for the current object.</returns>
        /// </summary>
        public override int GetHashCode()
        {
            unchecked
            {
            int hash = ((int)(2166136261u));
            hash = ((hash * 16777619) 
                        + this.IsMultiline.GetHashCode());
            hash = ((hash * 16777619) 
                        + this.EncodingType.GetHashCode());
            hash = ((hash * 16777619) 
                        + this.Length.GetHashCode());
            return ((hash * 16777619) 
                        + base.GetHashCode());
            }
        }
        
        /// <summary>
        /// Appends an object state to a given StringBuilder in a form of JSON.
        /// <returns>A StringBuilder that was used to append the object to.</returns>
        /// </summary>
        public override System.Text.StringBuilder ToString(System.Text.StringBuilder builder)
        {
            builder.Append("{ \"$type\":  \"VarcharDataType\"");
            if (this.HasIsMultiline())
            {
                builder.Append(", \"IsMultiline\": ");
                builder.Append(this.IsMultiline);
            }
            if (this.HasEncodingType())
            {
                builder.Append(", \"EncodingType\": ");
                builder.Append(this.EncodingType);
            }
            if (this.HasLength())
            {
                builder.Append(", \"Length\": ");
                builder.Append(this.Length);
            }
            if (this.HasEncoding())
            {
                builder.Append(", \"Encoding\": \"");
                builder.Append(this.Encoding);
                builder.Append("\"");
            }
            if (this.HasIsNullable())
            {
                builder.Append(", \"IsNullable\": ");
                builder.Append(this.IsNullable);
            }
            builder.Append("}");
            return builder;
        }
        
        /// <summary>
        /// Returns a string that represents the current object.
        /// <returns>A string that represents the current object.</returns>
        /// </summary>
        public override string ToString()
        {
            return this.ToString(new System.Text.StringBuilder()).ToString();
        }
        #endregion
    }
}
