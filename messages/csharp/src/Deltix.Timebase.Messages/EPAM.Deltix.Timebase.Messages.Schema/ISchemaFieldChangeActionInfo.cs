/*
  Copyright 2021 EPAM Systems, Inc

  See the NOTICE file distributed with this work for additional information
  regarding copyright ownership. Licensed under the Apache License,
  Version 2.0 (the "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
  License for the specific language governing permissions and limitations under
  the License.
 */
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using EPAM.Deltix.Timebase.Messages;
using System;


namespace EPAM.Deltix.Timebase.Messages.Schema
{
    
    
    /// <summary>
    /// Class which defines a change to schema field.
    /// </summary>
    public interface ISchemaFieldChangeActionInfo : IRecordInfo
    {
        
        #region Properties
        /// <summary>
        /// Previous data field state.
        /// </summary>
        IDataFieldInfo PreviousState
        {
            get;
        }
        
        /// <summary>
        /// New descriptor state.
        /// </summary>
        IDataFieldInfo NewState
        {
            get;
        }
        
        /// <summary>
        /// Bitmask that defines the changes that were applied to the field.
        /// </summary>
        SchemaFieldChangeType ChangeTypes
        {
            get;
        }
        
        /// <summary>
        /// Defines the data transformation that was applied to the field.
        /// </summary>
        ISchemaFieldDataTransformationInfo DataTransformation
        {
            get;
        }
        #endregion
        
        #region Methods
        /// <summary>
        /// Flag that indicates whether property PreviousState has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        Boolean HasPreviousState();
        
        /// <summary>
        /// Flag that indicates whether property NewState has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        Boolean HasNewState();
        
        /// <summary>
        /// Flag that indicates whether property ChangeTypes has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        Boolean HasChangeTypes();
        
        /// <summary>
        /// Flag that indicates whether property DataTransformation has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        Boolean HasDataTransformation();
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        new ISchemaFieldChangeActionInfo Clone();
        #endregion
    }
}