/*
  Copyright 2021 EPAM Systems, Inc

  See the NOTICE file distributed with this work for additional information
  regarding copyright ownership. Licensed under the Apache License,
  Version 2.0 (the "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
  License for the specific language governing permissions and limitations under
  the License.
 */
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using EPAM.Deltix.Timebase.Messages;
using com.epam.deltix.containers.;
using System;


namespace EPAM.Deltix.Timebase.Messages.Schema
{
    
    
    /// <summary>
    /// Schema definition for non-static data field.
    /// </summary>
    [SchemaElement(Name="com.epam.deltix.timebase.messages.schema.NonStaticDataField", Title="NonStaticDataField", Description=null)]
    public class NonStaticDataField : DataField, INonStaticDataFieldInterface
    {
        
        public new static string ClassName = "com.epam.deltix.timebase.messages.schema.NonStaticDataField";
        
        private SByte _isPrimaryKey = TypeConstants.BooleanNull;
        
        private MutableString _relativeTo = null;
        
        /// <summary>
        /// Creates an instance of NonStaticDataField object.
        /// </summary>
        public NonStaticDataField()
        {
        }
        
        #region Properties
        /// <summary>
        /// True, if field is defined as a primary key.
        /// The propery is applicable for unique streams only.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaType(Encoding=null, IsNullable=true, DataType=SchemaDataType.Default, Minimum=null, Maximum=null, NestedTypes=new Type[0])]
        public virtual Boolean IsPrimaryKey
        {
            get
            {
                if ((this._isPrimaryKey == TypeConstants.BooleanTrue))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            set
            {
                if ((value == true))
                {
                    this._isPrimaryKey = TypeConstants.BooleanTrue;
                }
                else
                {
                    this._isPrimaryKey = TypeConstants.BooleanFalse;
                }
            }
        }
        
        /// <summary>
        /// If specified, the field value will be encoded as a difference with a field defined in a RelativeTo property.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaType(Encoding=null, IsNullable=true, DataType=SchemaDataType.Default, Minimum=null, Maximum=null, NestedTypes=new Type[0])]
        public virtual MutableString RelativeTo
        {
            get
            {
                return this._relativeTo;
            }
            set
            {
                this._relativeTo = value;
            }
        }
        #endregion
        
        #region Property Helpers
        /// <summary>
        /// Flag that indicates whether property IsPrimaryKey has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasIsPrimaryKey()
        {
            return (this._isPrimaryKey != TypeConstants.BooleanNull);
        }
        
        /// <summary>
        /// Sets null to IsPrimaryKey property.
        /// </summary>
        public void NullifyIsPrimaryKey()
        {
            this._isPrimaryKey = TypeConstants.BooleanNull;
        }
        
        /// <summary>
        /// Flag that indicates whether property RelativeTo has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasRelativeTo()
        {
            return (this._relativeTo != null);
        }
        
        /// <summary>
        /// Sets null to RelativeTo property.
        /// </summary>
        public void NullifyRelativeTo()
        {
            this._relativeTo = null;
        }
        #endregion
        
        #region Message Methods
        /// <summary>
        /// Creates a new instance of message.
        /// <returns>New instance of message of the same type as this.</returns>
        /// </summary>
        protected override IRecordInterface CreateInstance()
        {
            return new NonStaticDataField();
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        INonStaticDataFieldInfo INonStaticDataFieldInfo.Clone()
        {
            return ((INonStaticDataFieldInfo)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        INonStaticDataFieldInterface INonStaticDataFieldInterface.Clone()
        {
            return ((INonStaticDataFieldInterface)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        public new NonStaticDataField Clone()
        {
            return ((NonStaticDataField)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        protected override IRecordInterface CopyFromImpl(IRecordInfo source)
        {
            base.CopyFromImpl(source);
            if (typeof(INonStaticDataFieldInfo).IsInstanceOfType(source))
            {
                INonStaticDataFieldInfo typedSource = ((INonStaticDataFieldInfo)(source));
                if ((typedSource.HasIsPrimaryKey() == true))
                {
                    this.IsPrimaryKey = typedSource.IsPrimaryKey;
                }
                else
                {
                    this.NullifyIsPrimaryKey();
                }
                if ((typedSource.RelativeTo != null))
                {
                    if ((this.RelativeTo == null))
                    {
                        this.RelativeTo = new com.epam.deltix.containers.MutableString(typedSource.RelativeTo);
                    }
                    else
                    {
                        this.RelativeTo.Assign(typedSource.RelativeTo);
                    }
                }
                else
                {
                    this.RelativeTo = null;
                }
            }
            return this;
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        INonStaticDataFieldInterface INonStaticDataFieldInterface.CopyFrom(IRecordInfo source)
        {
            return ((INonStaticDataFieldInterface)(this.CopyFromImpl(source)));
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        public new NonStaticDataField CopyFrom(IRecordInfo source)
        {
            return ((NonStaticDataField)(this.CopyFromImpl(source)));
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        protected override IRecordInterface NullifyImpl()
        {
            base.NullifyImpl();
            this.NullifyIsPrimaryKey();
            this.NullifyRelativeTo();
            return this;
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        INonStaticDataFieldInterface INonStaticDataFieldInterface.Nullify()
        {
            return ((INonStaticDataFieldInterface)(this.NullifyImpl()));
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        public new NonStaticDataField Nullify()
        {
            return ((NonStaticDataField)(this.NullifyImpl()));
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        protected override IRecordInterface ResetImpl()
        {
            base.ResetImpl();
            this._isPrimaryKey = TypeConstants.BooleanNull;
            this._relativeTo = null;
            return this;
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        INonStaticDataFieldInterface INonStaticDataFieldInterface.Reset()
        {
            return ((INonStaticDataFieldInterface)(this.ResetImpl()));
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        public new NonStaticDataField Reset()
        {
            return ((NonStaticDataField)(this.ResetImpl()));
        }
        #endregion
        
        #region Standard Methods
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public virtual bool Equals(NonStaticDataField obj)
        {
            if ((obj == null))
            {
                return false;
            }
            if (((this.HasIsPrimaryKey() != obj.HasIsPrimaryKey()) 
                        || (this.IsPrimaryKey != obj.IsPrimaryKey)))
            {
                return false;
            }
            if (((this.RelativeTo != null) 
                        && (obj.RelativeTo != null)))
            {
                if ((this.RelativeTo.Equals(obj.RelativeTo) != true))
                {
                    return false;
                }
            }
            else
            {
                if ((this.RelativeTo != obj.RelativeTo))
                {
                    return false;
                }
            }
            return base.Equals(obj);
        }
        
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public override bool Equals(object obj)
        {
            if ((typeof(NonStaticDataField).IsInstanceOfType(obj) == false))
            {
                return false;
            }
            return this.Equals(((NonStaticDataField)(obj)));
        }
        
        /// <summary>
        /// Calculates a hash code for the current object.
        /// <returns>A hash code for the current object.</returns>
        /// </summary>
        public override int GetHashCode()
        {
            unchecked
            {
            int hash = ((int)(2166136261u));
            hash = ((hash * 16777619) 
                        + this.IsPrimaryKey.GetHashCode());
            if ((this.RelativeTo == null))
            {
                hash = ((hash * 16777619) 
                            + 0);
            }
            else
            {
                hash = ((hash * 16777619) 
                            + this.RelativeTo.GetHashCode());
            }
            return ((hash * 16777619) 
                        + base.GetHashCode());
            }
        }
        
        /// <summary>
        /// Appends an object state to a given StringBuilder in a form of JSON.
        /// <returns>A StringBuilder that was used to append the object to.</returns>
        /// </summary>
        public override System.Text.StringBuilder ToString(System.Text.StringBuilder builder)
        {
            builder.Append("{ \"$type\":  \"NonStaticDataField\"");
            if (this.HasIsPrimaryKey())
            {
                builder.Append(", \"IsPrimaryKey\": ");
                builder.Append(this.IsPrimaryKey);
            }
            if (this.HasRelativeTo())
            {
                builder.Append(", \"RelativeTo\": \"");
                builder.Append(this.RelativeTo);
                builder.Append("\"");
            }
            if (this.HasDataType())
            {
                builder.Append(", \"DataType\": {");
                this.DataType.ToString(builder);
                builder.Append("}");
            }
            if (this.HasName())
            {
                builder.Append(", \"Name\": \"");
                builder.Append(this.Name);
                builder.Append("\"");
            }
            if (this.HasTitle())
            {
                builder.Append(", \"Title\": \"");
                builder.Append(this.Title);
                builder.Append("\"");
            }
            if (this.HasDescription())
            {
                builder.Append(", \"Description\": \"");
                builder.Append(this.Description);
                builder.Append("\"");
            }
            builder.Append("}");
            return builder;
        }
        
        /// <summary>
        /// Returns a string that represents the current object.
        /// <returns>A string that represents the current object.</returns>
        /// </summary>
        public override string ToString()
        {
            return this.ToString(new System.Text.StringBuilder()).ToString();
        }
        #endregion
    }
}