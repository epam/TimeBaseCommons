//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using EPAM.Deltix.Timebase.Messages;
using com.epam.deltix.containers.;
using System;


namespace EPAM.Deltix.Timebase.Messages.Schema
{
    
    
    /// <summary>
    /// This is a base class for schema nodes.
    /// </summary>
    [SchemaElement(Name="com.epam.deltix.timebase.messages.schema.NamedDescriptor", Title="NamedDescriptor", Description=null)]
    public abstract class NamedDescriptor : INamedDescriptorInterface, IRecordInterface, ICloneable
    {
        
        public static string ClassName = "com.epam.deltix.timebase.messages.schema.NamedDescriptor";
        
        private MutableString _name = null;
        
        private MutableString _title = null;
        
        private MutableString _description = null;
        
        /// <summary>
        /// Creates an instance of NamedDescriptor object.
        /// </summary>
        public NamedDescriptor()
        {
        }
        
        #region Properties
        /// <summary>
        /// Node name.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaType(Encoding=null, IsNullable=false, DataType=SchemaDataType.Default, Minimum=null, Maximum=null, NestedTypes=new Type[0])]
        public virtual MutableString Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        /// <summary>
        /// Node title.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaType(Encoding=null, IsNullable=true, DataType=SchemaDataType.Default, Minimum=null, Maximum=null, NestedTypes=new Type[0])]
        public virtual MutableString Title
        {
            get
            {
                return this._title;
            }
            set
            {
                this._title = value;
            }
        }
        
        /// <summary>
        /// Node description.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaType(Encoding=null, IsNullable=true, DataType=SchemaDataType.Default, Minimum=null, Maximum=null, NestedTypes=new Type[0])]
        public virtual MutableString Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        #endregion
        
        #region Property Helpers
        /// <summary>
        /// Flag that indicates whether property Name has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasName()
        {
            return (this._name != null);
        }
        
        /// <summary>
        /// Sets null to Name property.
        /// </summary>
        public void NullifyName()
        {
            this._name = null;
        }
        
        /// <summary>
        /// Flag that indicates whether property Title has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasTitle()
        {
            return (this._title != null);
        }
        
        /// <summary>
        /// Sets null to Title property.
        /// </summary>
        public void NullifyTitle()
        {
            this._title = null;
        }
        
        /// <summary>
        /// Flag that indicates whether property Description has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasDescription()
        {
            return (this._description != null);
        }
        
        /// <summary>
        /// Sets null to Description property.
        /// </summary>
        public void NullifyDescription()
        {
            this._description = null;
        }
        #endregion
        
        #region Message Methods
        /// <summary>
        /// Creates a new instance of message.
        /// <returns>New instance of message of the same type as this.</returns>
        /// </summary>
        protected virtual IRecordInterface CreateInstance()
        {
            throw new System.InvalidOperationException("Cannot create an instance of abstract class.");
        }
        
        /// <summary>
        /// Creates a new instance of message.
        /// <returns>New instance of message of the same type as this.</returns>
        /// </summary>
        protected virtual IRecordInfo CloneImpl()
        {
            IRecordInterface message = this.CreateInstance();
            message.CopyFrom(this);
            return message;
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        object System.ICloneable.Clone()
        {
            return ((object)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        IRecordInterface IRecordInterface.Clone()
        {
            return ((IRecordInterface)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        IRecordInfo IRecordInfo.Clone()
        {
            return ((IRecordInfo)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        INamedDescriptorInfo INamedDescriptorInfo.Clone()
        {
            return ((INamedDescriptorInfo)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        INamedDescriptorInterface INamedDescriptorInterface.Clone()
        {
            return ((INamedDescriptorInterface)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        public NamedDescriptor Clone()
        {
            return ((NamedDescriptor)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        protected virtual IRecordInterface CopyFromImpl(IRecordInfo source)
        {
            if (typeof(INamedDescriptorInfo).IsInstanceOfType(source))
            {
                INamedDescriptorInfo typedSource = ((INamedDescriptorInfo)(source));
                if ((typedSource.Name != null))
                {
                    if ((this.Name == null))
                    {
                        this.Name = new com.epam.deltix.containers.MutableString(typedSource.Name);
                    }
                    else
                    {
                        this.Name.Assign(typedSource.Name);
                    }
                }
                else
                {
                    this.Name = null;
                }
                if ((typedSource.Title != null))
                {
                    if ((this.Title == null))
                    {
                        this.Title = new com.epam.deltix.containers.MutableString(typedSource.Title);
                    }
                    else
                    {
                        this.Title.Assign(typedSource.Title);
                    }
                }
                else
                {
                    this.Title = null;
                }
                if ((typedSource.Description != null))
                {
                    if ((this.Description == null))
                    {
                        this.Description = new com.epam.deltix.containers.MutableString(typedSource.Description);
                    }
                    else
                    {
                        this.Description.Assign(typedSource.Description);
                    }
                }
                else
                {
                    this.Description = null;
                }
            }
            return this;
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        IRecordInterface IRecordInterface.CopyFrom(IRecordInfo source)
        {
            return ((IRecordInterface)(this.CopyFromImpl(source)));
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        INamedDescriptorInterface INamedDescriptorInterface.CopyFrom(IRecordInfo source)
        {
            return ((INamedDescriptorInterface)(this.CopyFromImpl(source)));
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        public NamedDescriptor CopyFrom(IRecordInfo source)
        {
            return ((NamedDescriptor)(this.CopyFromImpl(source)));
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        protected virtual IRecordInterface NullifyImpl()
        {
            this.NullifyName();
            this.NullifyTitle();
            this.NullifyDescription();
            return this;
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        IRecordInterface IRecordInterface.Nullify()
        {
            return ((IRecordInterface)(this.NullifyImpl()));
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        INamedDescriptorInterface INamedDescriptorInterface.Nullify()
        {
            return ((INamedDescriptorInterface)(this.NullifyImpl()));
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        public NamedDescriptor Nullify()
        {
            return ((NamedDescriptor)(this.NullifyImpl()));
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        protected virtual IRecordInterface ResetImpl()
        {
            this._name = null;
            this._title = null;
            this._description = null;
            return this;
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        IRecordInterface IRecordInterface.Reset()
        {
            return ((IRecordInterface)(this.ResetImpl()));
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        INamedDescriptorInterface INamedDescriptorInterface.Reset()
        {
            return ((INamedDescriptorInterface)(this.ResetImpl()));
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        public NamedDescriptor Reset()
        {
            return ((NamedDescriptor)(this.ResetImpl()));
        }
        #endregion
        
        #region Standard Methods
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public virtual bool Equals(NamedDescriptor obj)
        {
            if ((obj == null))
            {
                return false;
            }
            if (((this.Name != null) 
                        && (obj.Name != null)))
            {
                if ((this.Name.Equals(obj.Name) != true))
                {
                    return false;
                }
            }
            else
            {
                if ((this.Name != obj.Name))
                {
                    return false;
                }
            }
            if (((this.Title != null) 
                        && (obj.Title != null)))
            {
                if ((this.Title.Equals(obj.Title) != true))
                {
                    return false;
                }
            }
            else
            {
                if ((this.Title != obj.Title))
                {
                    return false;
                }
            }
            if (((this.Description != null) 
                        && (obj.Description != null)))
            {
                if ((this.Description.Equals(obj.Description) != true))
                {
                    return false;
                }
            }
            else
            {
                if ((this.Description != obj.Description))
                {
                    return false;
                }
            }
            return true;
        }
        
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public override bool Equals(object obj)
        {
            if ((typeof(NamedDescriptor).IsInstanceOfType(obj) == false))
            {
                return false;
            }
            return this.Equals(((NamedDescriptor)(obj)));
        }
        
        /// <summary>
        /// Calculates a hash code for the current object.
        /// <returns>A hash code for the current object.</returns>
        /// </summary>
        public override int GetHashCode()
        {
            unchecked
            {
            int hash = ((int)(2166136261u));
            if ((this.Name == null))
            {
                hash = ((hash * 16777619) 
                            + 0);
            }
            else
            {
                hash = ((hash * 16777619) 
                            + this.Name.GetHashCode());
            }
            if ((this.Title == null))
            {
                hash = ((hash * 16777619) 
                            + 0);
            }
            else
            {
                hash = ((hash * 16777619) 
                            + this.Title.GetHashCode());
            }
            if ((this.Description == null))
            {
                hash = ((hash * 16777619) 
                            + 0);
            }
            else
            {
                hash = ((hash * 16777619) 
                            + this.Description.GetHashCode());
            }
            return hash;
            }
        }
        
        /// <summary>
        /// Appends an object state to a given StringBuilder in a form of JSON.
        /// <returns>A StringBuilder that was used to append the object to.</returns>
        /// </summary>
        public virtual System.Text.StringBuilder ToString(System.Text.StringBuilder builder)
        {
            builder.Append("{ \"$type\":  \"NamedDescriptor\"");
            if (this.HasName())
            {
                builder.Append(", \"Name\": \"");
                builder.Append(this.Name);
                builder.Append("\"");
            }
            if (this.HasTitle())
            {
                builder.Append(", \"Title\": \"");
                builder.Append(this.Title);
                builder.Append("\"");
            }
            if (this.HasDescription())
            {
                builder.Append(", \"Description\": \"");
                builder.Append(this.Description);
                builder.Append("\"");
            }
            builder.Append("}");
            return builder;
        }
        
        /// <summary>
        /// Returns a string that represents the current object.
        /// <returns>A string that represents the current object.</returns>
        /// </summary>
        public override string ToString()
        {
            return this.ToString(new System.Text.StringBuilder()).ToString();
        }
        #endregion
    }
}
