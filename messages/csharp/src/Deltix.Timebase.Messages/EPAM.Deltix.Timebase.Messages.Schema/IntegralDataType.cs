//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using EPAM.Deltix.Timebase.Messages;
using com.epam.deltix.containers.;
using System;


namespace EPAM.Deltix.Timebase.Messages.Schema
{
    
    
    /// <summary>
    /// This is a base class for numeric data types.
    /// </summary>
    [SchemaElement(Name="com.epam.deltix.timebase.messages.schema.IntegralDataType", Title="IntegralDataType", Description=null)]
    public abstract class IntegralDataType : DataType, IIntegralDataTypeInterface
    {
        
        public new static string ClassName = "com.epam.deltix.timebase.messages.schema.IntegralDataType";
        
        private MutableString _minValue = null;
        
        private MutableString _maxValue = null;
        
        /// <summary>
        /// Creates an instance of IntegralDataType object.
        /// </summary>
        public IntegralDataType()
        {
        }
        
        #region Properties
        /// <summary>
        /// String definition for minimum constraint.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaType(Encoding=null, IsNullable=true, DataType=SchemaDataType.Default, Minimum=null, Maximum=null, NestedTypes=new Type[0])]
        public virtual MutableString MinValue
        {
            get
            {
                return this._minValue;
            }
            set
            {
                this._minValue = value;
            }
        }
        
        /// <summary>
        /// String definition for maximum constraint.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaType(Encoding=null, IsNullable=true, DataType=SchemaDataType.Default, Minimum=null, Maximum=null, NestedTypes=new Type[0])]
        public virtual MutableString MaxValue
        {
            get
            {
                return this._maxValue;
            }
            set
            {
                this._maxValue = value;
            }
        }
        #endregion
        
        #region Property Helpers
        /// <summary>
        /// Flag that indicates whether property MinValue has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasMinValue()
        {
            return (this._minValue != null);
        }
        
        /// <summary>
        /// Sets null to MinValue property.
        /// </summary>
        public void NullifyMinValue()
        {
            this._minValue = null;
        }
        
        /// <summary>
        /// Flag that indicates whether property MaxValue has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasMaxValue()
        {
            return (this._maxValue != null);
        }
        
        /// <summary>
        /// Sets null to MaxValue property.
        /// </summary>
        public void NullifyMaxValue()
        {
            this._maxValue = null;
        }
        #endregion
        
        #region Message Methods
        /// <summary>
        /// Creates a new instance of message.
        /// <returns>New instance of message of the same type as this.</returns>
        /// </summary>
        protected override IRecordInterface CreateInstance()
        {
            throw new System.InvalidOperationException("Cannot create an instance of abstract class.");
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        IIntegralDataTypeInfo IIntegralDataTypeInfo.Clone()
        {
            return ((IIntegralDataTypeInfo)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        IIntegralDataTypeInterface IIntegralDataTypeInterface.Clone()
        {
            return ((IIntegralDataTypeInterface)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        public new IntegralDataType Clone()
        {
            return ((IntegralDataType)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        protected override IRecordInterface CopyFromImpl(IRecordInfo source)
        {
            base.CopyFromImpl(source);
            if (typeof(IIntegralDataTypeInfo).IsInstanceOfType(source))
            {
                IIntegralDataTypeInfo typedSource = ((IIntegralDataTypeInfo)(source));
                if ((typedSource.MinValue != null))
                {
                    if ((this.MinValue == null))
                    {
                        this.MinValue = new com.epam.deltix.containers.MutableString(typedSource.MinValue);
                    }
                    else
                    {
                        this.MinValue.Assign(typedSource.MinValue);
                    }
                }
                else
                {
                    this.MinValue = null;
                }
                if ((typedSource.MaxValue != null))
                {
                    if ((this.MaxValue == null))
                    {
                        this.MaxValue = new com.epam.deltix.containers.MutableString(typedSource.MaxValue);
                    }
                    else
                    {
                        this.MaxValue.Assign(typedSource.MaxValue);
                    }
                }
                else
                {
                    this.MaxValue = null;
                }
            }
            return this;
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        IIntegralDataTypeInterface IIntegralDataTypeInterface.CopyFrom(IRecordInfo source)
        {
            return ((IIntegralDataTypeInterface)(this.CopyFromImpl(source)));
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        public new IntegralDataType CopyFrom(IRecordInfo source)
        {
            return ((IntegralDataType)(this.CopyFromImpl(source)));
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        protected override IRecordInterface NullifyImpl()
        {
            base.NullifyImpl();
            this.NullifyMinValue();
            this.NullifyMaxValue();
            return this;
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        IIntegralDataTypeInterface IIntegralDataTypeInterface.Nullify()
        {
            return ((IIntegralDataTypeInterface)(this.NullifyImpl()));
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        public new IntegralDataType Nullify()
        {
            return ((IntegralDataType)(this.NullifyImpl()));
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        protected override IRecordInterface ResetImpl()
        {
            base.ResetImpl();
            this._minValue = null;
            this._maxValue = null;
            return this;
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        IIntegralDataTypeInterface IIntegralDataTypeInterface.Reset()
        {
            return ((IIntegralDataTypeInterface)(this.ResetImpl()));
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        public new IntegralDataType Reset()
        {
            return ((IntegralDataType)(this.ResetImpl()));
        }
        #endregion
        
        #region Standard Methods
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public virtual bool Equals(IntegralDataType obj)
        {
            if ((obj == null))
            {
                return false;
            }
            if (((this.MinValue != null) 
                        && (obj.MinValue != null)))
            {
                if ((this.MinValue.Equals(obj.MinValue) != true))
                {
                    return false;
                }
            }
            else
            {
                if ((this.MinValue != obj.MinValue))
                {
                    return false;
                }
            }
            if (((this.MaxValue != null) 
                        && (obj.MaxValue != null)))
            {
                if ((this.MaxValue.Equals(obj.MaxValue) != true))
                {
                    return false;
                }
            }
            else
            {
                if ((this.MaxValue != obj.MaxValue))
                {
                    return false;
                }
            }
            return base.Equals(obj);
        }
        
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public override bool Equals(object obj)
        {
            if ((typeof(IntegralDataType).IsInstanceOfType(obj) == false))
            {
                return false;
            }
            return this.Equals(((IntegralDataType)(obj)));
        }
        
        /// <summary>
        /// Calculates a hash code for the current object.
        /// <returns>A hash code for the current object.</returns>
        /// </summary>
        public override int GetHashCode()
        {
            unchecked
            {
            int hash = ((int)(2166136261u));
            if ((this.MinValue == null))
            {
                hash = ((hash * 16777619) 
                            + 0);
            }
            else
            {
                hash = ((hash * 16777619) 
                            + this.MinValue.GetHashCode());
            }
            if ((this.MaxValue == null))
            {
                hash = ((hash * 16777619) 
                            + 0);
            }
            else
            {
                hash = ((hash * 16777619) 
                            + this.MaxValue.GetHashCode());
            }
            return ((hash * 16777619) 
                        + base.GetHashCode());
            }
        }
        
        /// <summary>
        /// Appends an object state to a given StringBuilder in a form of JSON.
        /// <returns>A StringBuilder that was used to append the object to.</returns>
        /// </summary>
        public override System.Text.StringBuilder ToString(System.Text.StringBuilder builder)
        {
            builder.Append("{ \"$type\":  \"IntegralDataType\"");
            if (this.HasMinValue())
            {
                builder.Append(", \"MinValue\": \"");
                builder.Append(this.MinValue);
                builder.Append("\"");
            }
            if (this.HasMaxValue())
            {
                builder.Append(", \"MaxValue\": \"");
                builder.Append(this.MaxValue);
                builder.Append("\"");
            }
            if (this.HasEncoding())
            {
                builder.Append(", \"Encoding\": \"");
                builder.Append(this.Encoding);
                builder.Append("\"");
            }
            if (this.HasIsNullable())
            {
                builder.Append(", \"IsNullable\": ");
                builder.Append(this.IsNullable);
            }
            builder.Append("}");
            return builder;
        }
        
        /// <summary>
        /// Returns a string that represents the current object.
        /// <returns>A string that represents the current object.</returns>
        /// </summary>
        public override string ToString()
        {
            return this.ToString(new System.Text.StringBuilder()).ToString();
        }
        #endregion
    }
}
