/*
  Copyright 2021 EPAM Systems, Inc

  See the NOTICE file distributed with this work for additional information
  regarding copyright ownership. Licensed under the Apache License,
  Version 2.0 (the "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
  License for the specific language governing permissions and limitations under
  the License.
 */
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using EPAM.Deltix.Timebase.Messages;
using com.epam.deltix.containers.;
using System;


namespace EPAM.Deltix.Timebase.Messages.Schema
{
    
    
    /// <summary>
    /// Schema definition for a single enumeration value.
    /// </summary>
    [SchemaElement(Name="com.epam.deltix.timebase.messages.schema.EnumValue", Title="EnumValue", Description=null)]
    public class EnumValue : IEnumValueInterface, IRecordInterface, ICloneable
    {
        
        public static string ClassName = "com.epam.deltix.timebase.messages.schema.EnumValue";
        
        private String _symbol = null;
        
        private Int16 _value = TypeConstants.Int16Null;
        
        /// <summary>
        /// Creates an instance of EnumValue object.
        /// </summary>
        public EnumValue()
        {
        }
        
        #region Properties
        /// <summary>
        /// Enumeration symbol.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaType(Encoding=null, IsNullable=false, DataType=SchemaDataType.Default, Minimum=null, Maximum=null, NestedTypes=new Type[0])]
        public virtual String Symbol
        {
            get
            {
                return this._symbol;
            }
            set
            {
                this._symbol = value;
            }
        }
        
        /// <summary>
        /// Enumeration value.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaType(Encoding=null, IsNullable=false, DataType=SchemaDataType.Default, Minimum=null, Maximum=null, NestedTypes=new Type[0])]
        public virtual Int16 Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
        #endregion
        
        #region Property Helpers
        /// <summary>
        /// Flag that indicates whether property Symbol has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasSymbol()
        {
            return (this._symbol != null);
        }
        
        /// <summary>
        /// Sets null to Symbol property.
        /// </summary>
        public void NullifySymbol()
        {
            this._symbol = null;
        }
        
        /// <summary>
        /// Flag that indicates whether property Value has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasValue()
        {
            return (this._value != TypeConstants.Int16Null);
        }
        
        /// <summary>
        /// Sets null to Value property.
        /// </summary>
        public void NullifyValue()
        {
            this._value = TypeConstants.Int16Null;
        }
        #endregion
        
        #region Message Methods
        /// <summary>
        /// Creates a new instance of message.
        /// <returns>New instance of message of the same type as this.</returns>
        /// </summary>
        protected virtual IRecordInterface CreateInstance()
        {
            return new EnumValue();
        }
        
        /// <summary>
        /// Creates a new instance of message.
        /// <returns>New instance of message of the same type as this.</returns>
        /// </summary>
        protected virtual IRecordInfo CloneImpl()
        {
            IRecordInterface message = this.CreateInstance();
            message.CopyFrom(this);
            return message;
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        object System.ICloneable.Clone()
        {
            return ((object)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        IRecordInterface IRecordInterface.Clone()
        {
            return ((IRecordInterface)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        IRecordInfo IRecordInfo.Clone()
        {
            return ((IRecordInfo)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        IEnumValueInfo IEnumValueInfo.Clone()
        {
            return ((IEnumValueInfo)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        IEnumValueInterface IEnumValueInterface.Clone()
        {
            return ((IEnumValueInterface)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        public EnumValue Clone()
        {
            return ((EnumValue)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        protected virtual IRecordInterface CopyFromImpl(IRecordInfo source)
        {
            if (typeof(IEnumValueInfo).IsInstanceOfType(source))
            {
                IEnumValueInfo typedSource = ((IEnumValueInfo)(source));
                this.Symbol = typedSource.Symbol;
                this.Value = typedSource.Value;
            }
            return this;
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        IRecordInterface IRecordInterface.CopyFrom(IRecordInfo source)
        {
            return ((IRecordInterface)(this.CopyFromImpl(source)));
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        IEnumValueInterface IEnumValueInterface.CopyFrom(IRecordInfo source)
        {
            return ((IEnumValueInterface)(this.CopyFromImpl(source)));
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        public EnumValue CopyFrom(IRecordInfo source)
        {
            return ((EnumValue)(this.CopyFromImpl(source)));
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        protected virtual IRecordInterface NullifyImpl()
        {
            this.NullifySymbol();
            this.NullifyValue();
            return this;
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        IRecordInterface IRecordInterface.Nullify()
        {
            return ((IRecordInterface)(this.NullifyImpl()));
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        IEnumValueInterface IEnumValueInterface.Nullify()
        {
            return ((IEnumValueInterface)(this.NullifyImpl()));
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        public EnumValue Nullify()
        {
            return ((EnumValue)(this.NullifyImpl()));
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        protected virtual IRecordInterface ResetImpl()
        {
            this._symbol = null;
            this._value = TypeConstants.Int16Null;
            return this;
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        IRecordInterface IRecordInterface.Reset()
        {
            return ((IRecordInterface)(this.ResetImpl()));
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        IEnumValueInterface IEnumValueInterface.Reset()
        {
            return ((IEnumValueInterface)(this.ResetImpl()));
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        public EnumValue Reset()
        {
            return ((EnumValue)(this.ResetImpl()));
        }
        #endregion
        
        #region Standard Methods
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public virtual bool Equals(EnumValue obj)
        {
            if ((obj == null))
            {
                return false;
            }
            if ((this.Symbol != obj.Symbol))
            {
                return false;
            }
            if ((this.Value != obj.Value))
            {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public override bool Equals(object obj)
        {
            if ((typeof(EnumValue).IsInstanceOfType(obj) == false))
            {
                return false;
            }
            return this.Equals(((EnumValue)(obj)));
        }
        
        /// <summary>
        /// Calculates a hash code for the current object.
        /// <returns>A hash code for the current object.</returns>
        /// </summary>
        public override int GetHashCode()
        {
            unchecked
            {
            int hash = ((int)(2166136261u));
            hash = ((hash * 16777619) 
                        + this.Symbol.GetHashCode());
            hash = ((hash * 16777619) 
                        + this.Value.GetHashCode());
            return hash;
            }
        }
        
        /// <summary>
        /// Appends an object state to a given StringBuilder in a form of JSON.
        /// <returns>A StringBuilder that was used to append the object to.</returns>
        /// </summary>
        public virtual System.Text.StringBuilder ToString(System.Text.StringBuilder builder)
        {
            builder.Append("{ \"$type\":  \"EnumValue\"");
            if (this.HasSymbol())
            {
                builder.Append(", \"Symbol\": \"");
                builder.Append(this.Symbol);
                builder.Append("\"");
            }
            if (this.HasValue())
            {
                builder.Append(", \"Value\": ");
                builder.Append(this.Value);
            }
            builder.Append("}");
            return builder;
        }
        
        /// <summary>
        /// Returns a string that represents the current object.
        /// <returns>A string that represents the current object.</returns>
        /// </summary>
        public override string ToString()
        {
            return this.ToString(new System.Text.StringBuilder()).ToString();
        }
        #endregion
    }
}