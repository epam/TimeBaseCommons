/*
  Copyright 2021 EPAM Systems, Inc

  See the NOTICE file distributed with this work for additional information
  regarding copyright ownership. Licensed under the Apache License,
  Version 2.0 (the "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
  License for the specific language governing permissions and limitations under
  the License.
 */
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using EPAM.Deltix.Timebase.Messages;
using System;


namespace EPAM.Deltix.Timebase.Messages.Schema
{
    
    
    /// <summary>
    /// Schema definition of array data type.
    /// </summary>
    [SchemaElement(Name="com.epam.deltix.timebase.messages.schema.ArrayDataType", Title="ArrayDataType", Description=null)]
    public class ArrayDataType : DataType, IArrayDataTypeInterface
    {
        
        public new static string ClassName = "com.epam.deltix.timebase.messages.schema.ArrayDataType";
        
        private IDataTypeInterface _elementType = null;
        
        /// <summary>
        /// Creates an instance of ArrayDataType object.
        /// </summary>
        public ArrayDataType()
        {
        }
        
        #region Properties
        /// <summary>
        /// Array element data type.
        /// </summary>
        [SchemaIgnore()]
        IDataTypeInfo IArrayDataTypeInfo.ElementType
        {
            get
            {
                return this._elementType;
            }
        }
        
        /// <summary>
        /// Array element data type.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaType(Encoding=null, IsNullable=false, DataType=SchemaDataType.Object, Minimum=null, Maximum=null, NestedTypes=new Type[] {
                typeof(BinaryDataType),
                typeof(BooleanDataType),
                typeof(CharDataType),
                typeof(ClassDataType),
                typeof(DateTimeDataType),
                typeof(EnumDataType),
                typeof(FloatDataType),
                typeof(IntegerDataType),
                typeof(TimeOfDayDataType),
                typeof(VarcharDataType)})]
        public virtual IDataTypeInterface ElementType
        {
            get
            {
                return this._elementType;
            }
            set
            {
                this._elementType = value;
            }
        }
        #endregion
        
        #region Property Helpers
        /// <summary>
        /// Flag that indicates whether property ElementType has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasElementType()
        {
            return (this._elementType != null);
        }
        
        /// <summary>
        /// Sets null to ElementType property.
        /// </summary>
        public void NullifyElementType()
        {
            this._elementType = null;
        }
        #endregion
        
        #region Message Methods
        /// <summary>
        /// Creates a new instance of message.
        /// <returns>New instance of message of the same type as this.</returns>
        /// </summary>
        protected override IRecordInterface CreateInstance()
        {
            return new ArrayDataType();
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        IArrayDataTypeInfo IArrayDataTypeInfo.Clone()
        {
            return ((IArrayDataTypeInfo)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        IArrayDataTypeInterface IArrayDataTypeInterface.Clone()
        {
            return ((IArrayDataTypeInterface)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        public new ArrayDataType Clone()
        {
            return ((ArrayDataType)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        protected override IRecordInterface CopyFromImpl(IRecordInfo source)
        {
            base.CopyFromImpl(source);
            if (typeof(IArrayDataTypeInfo).IsInstanceOfType(source))
            {
                IArrayDataTypeInfo typedSource = ((IArrayDataTypeInfo)(source));
                if ((typedSource.ElementType != null))
                {
                    if (((this.ElementType == null) 
                                || (this.ElementType.GetType() == typedSource.ElementType.GetType())))
                    {
                        this.ElementType = ((DataType)(typedSource.ElementType.Clone()));
                    }
                    else
                    {
                        this.ElementType.CopyFrom(typedSource.ElementType);
                    }
                }
                else
                {
                    this.ElementType = null;
                }
            }
            return this;
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        IArrayDataTypeInterface IArrayDataTypeInterface.CopyFrom(IRecordInfo source)
        {
            return ((IArrayDataTypeInterface)(this.CopyFromImpl(source)));
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        public new ArrayDataType CopyFrom(IRecordInfo source)
        {
            return ((ArrayDataType)(this.CopyFromImpl(source)));
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        protected override IRecordInterface NullifyImpl()
        {
            base.NullifyImpl();
            this.NullifyElementType();
            return this;
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        IArrayDataTypeInterface IArrayDataTypeInterface.Nullify()
        {
            return ((IArrayDataTypeInterface)(this.NullifyImpl()));
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        public new ArrayDataType Nullify()
        {
            return ((ArrayDataType)(this.NullifyImpl()));
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        protected override IRecordInterface ResetImpl()
        {
            base.ResetImpl();
            this._elementType = null;
            return this;
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        IArrayDataTypeInterface IArrayDataTypeInterface.Reset()
        {
            return ((IArrayDataTypeInterface)(this.ResetImpl()));
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        public new ArrayDataType Reset()
        {
            return ((ArrayDataType)(this.ResetImpl()));
        }
        #endregion
        
        #region Standard Methods
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public virtual bool Equals(ArrayDataType obj)
        {
            if ((obj == null))
            {
                return false;
            }
            if (((this.ElementType != null) 
                        && (obj.ElementType != null)))
            {
                if ((this.ElementType.Equals(obj.ElementType) != true))
                {
                    return false;
                }
            }
            else
            {
                if ((this.ElementType != obj.ElementType))
                {
                    return false;
                }
            }
            return base.Equals(obj);
        }
        
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public override bool Equals(object obj)
        {
            if ((typeof(ArrayDataType).IsInstanceOfType(obj) == false))
            {
                return false;
            }
            return this.Equals(((ArrayDataType)(obj)));
        }
        
        /// <summary>
        /// Calculates a hash code for the current object.
        /// <returns>A hash code for the current object.</returns>
        /// </summary>
        public override int GetHashCode()
        {
            unchecked
            {
            int hash = ((int)(2166136261u));
            if ((this.ElementType == null))
            {
                hash = ((hash * 16777619) 
                            + 0);
            }
            else
            {
                hash = ((hash * 16777619) 
                            + this.ElementType.GetHashCode());
            }
            return ((hash * 16777619) 
                        + base.GetHashCode());
            }
        }
        
        /// <summary>
        /// Appends an object state to a given StringBuilder in a form of JSON.
        /// <returns>A StringBuilder that was used to append the object to.</returns>
        /// </summary>
        public override System.Text.StringBuilder ToString(System.Text.StringBuilder builder)
        {
            builder.Append("{ \"$type\":  \"ArrayDataType\"");
            if (this.HasElementType())
            {
                builder.Append(", \"ElementType\": {");
                this.ElementType.ToString(builder);
                builder.Append("}");
            }
            if (this.HasEncoding())
            {
                builder.Append(", \"Encoding\": \"");
                builder.Append(this.Encoding);
                builder.Append("\"");
            }
            if (this.HasIsNullable())
            {
                builder.Append(", \"IsNullable\": ");
                builder.Append(this.IsNullable);
            }
            builder.Append("}");
            return builder;
        }
        
        /// <summary>
        /// Returns a string that represents the current object.
        /// <returns>A string that represents the current object.</returns>
        /// </summary>
        public override string ToString()
        {
            return this.ToString(new System.Text.StringBuilder()).ToString();
        }
        #endregion
    }
}