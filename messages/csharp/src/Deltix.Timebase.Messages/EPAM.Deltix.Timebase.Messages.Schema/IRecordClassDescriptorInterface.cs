/*
  Copyright 2021 EPAM Systems, Inc

  See the NOTICE file distributed with this work for additional information
  regarding copyright ownership. Licensed under the Apache License,
  Version 2.0 (the "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
  License for the specific language governing permissions and limitations under
  the License.
 */
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using EPAM.Deltix.Timebase.Messages;
using System;
using System.Collections.Generic;


namespace EPAM.Deltix.Timebase.Messages.Schema
{
    
    
    /// <summary>
    /// Schema definition for a class.
    /// </summary>
    public interface IRecordClassDescriptorInterface : IRecordClassDescriptorInfo, IClassDescriptorInterface
    {
        
        #region Properties
        /// <summary>
        /// Defines parent RecordClassDescriptor if exist.
        /// </summary>
        new IRecordClassDescriptorInterface Parent
        {
            get;
            set;
        }
        
        /// <summary>
        /// Defines if current RecordClassDescriptor is abstract.
        /// </summary>
        new Boolean IsAbstract
        {
            get;
            set;
        }
        
        /// <summary>
        /// Defines if current RecordClassDescriptor is content class.
        /// </summary>
        new Boolean IsContentClass
        {
            get;
            set;
        }
        
        /// <summary>
        /// List of fields of a class.
        /// </summary>
        new IList<IDataFieldInterface> DataFields
        {
            get;
            set;
        }
        #endregion
        
        #region Methods
        /// <summary>
        /// Sets null to Parent property.
        /// </summary>
        void NullifyParent();
        
        /// <summary>
        /// Sets null to IsAbstract property.
        /// </summary>
        void NullifyIsAbstract();
        
        /// <summary>
        /// Sets null to IsContentClass property.
        /// </summary>
        void NullifyIsContentClass();
        
        /// <summary>
        /// Sets null to DataFields property.
        /// </summary>
        void NullifyDataFields();
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        new IRecordClassDescriptorInterface Clone();
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        new IRecordClassDescriptorInterface CopyFrom(IRecordInfo source);
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        new IRecordClassDescriptorInterface Nullify();
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        new IRecordClassDescriptorInterface Reset();
        #endregion
    }
}