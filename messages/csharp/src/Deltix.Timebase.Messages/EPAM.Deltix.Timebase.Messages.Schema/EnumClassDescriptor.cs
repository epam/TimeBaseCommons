/*
  Copyright 2021 EPAM Systems, Inc

  See the NOTICE file distributed with this work for additional information
  regarding copyright ownership. Licensed under the Apache License,
  Version 2.0 (the "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
  License for the specific language governing permissions and limitations under
  the License.
 */
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using EPAM.Deltix.Timebase.Messages;
using System;
using System.Collections.Generic;


namespace EPAM.Deltix.Timebase.Messages.Schema
{
    
    
    /// <summary>
    /// Schema definition for enumeration class.
    /// </summary>
    [SchemaElement(Name="com.epam.deltix.timebase.messages.schema.EnumClassDescriptor", Title="EnumClassDescriptor", Description=null)]
    public class EnumClassDescriptor : ClassDescriptor, IEnumClassDescriptorInterface
    {
        
        public new static string ClassName = "com.epam.deltix.timebase.messages.schema.EnumClassDescriptor";
        
        private IList<IEnumValueInterface> _values = null;
        
        private SByte _isBitmask = TypeConstants.BooleanNull;
        
        /// <summary>
        /// Creates an instance of EnumClassDescriptor object.
        /// </summary>
        public EnumClassDescriptor()
        {
        }
        
        #region Properties
        /// <summary>
        /// List of values of enumeration.
        /// </summary>
        [SchemaIgnore()]
        IReadOnlyList<IEnumValueInfo> IEnumClassDescriptorInfo.Values
        {
            get
            {
                return ((IReadOnlyList<IEnumValueInterface>)(this._values));
            }
        }
        
        /// <summary>
        /// List of values of enumeration.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaArrayType(IsNullable=false, IsElementNullable=false, ElementEncoding=null, ElementDataType=SchemaDataType.Default, ElementMinimum=null, ElementMaximum=null, ElementTypes=new Type[] {
                typeof(EnumValue)})]
        public virtual IList<IEnumValueInterface> Values
        {
            get
            {
                return this._values;
            }
            set
            {
                if (((value == null) 
                            || (typeof(IReadOnlyList<IEnumValueInterface>).IsInstanceOfType(value) == true)))
                {
                    this._values = value;
                }
                else
                {
                    throw new System.InvalidOperationException("Assigned value must implement IReadOnlyList<IEnumValueInterface> interface.");
                }
            }
        }
        
        /// <summary>
        /// True, if enumeration represents a bitmask.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaType(Encoding=null, IsNullable=false, DataType=SchemaDataType.Default, Minimum=null, Maximum=null, NestedTypes=new Type[0])]
        public virtual Boolean IsBitmask
        {
            get
            {
                if ((this._isBitmask == TypeConstants.BooleanTrue))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            set
            {
                if ((value == true))
                {
                    this._isBitmask = TypeConstants.BooleanTrue;
                }
                else
                {
                    this._isBitmask = TypeConstants.BooleanFalse;
                }
            }
        }
        #endregion
        
        #region Property Helpers
        /// <summary>
        /// Flag that indicates whether property Values has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasValues()
        {
            return (this._values != null);
        }
        
        /// <summary>
        /// Sets null to Values property.
        /// </summary>
        public void NullifyValues()
        {
            this._values = null;
        }
        
        /// <summary>
        /// Flag that indicates whether property IsBitmask has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasIsBitmask()
        {
            return (this._isBitmask != TypeConstants.BooleanNull);
        }
        
        /// <summary>
        /// Sets null to IsBitmask property.
        /// </summary>
        public void NullifyIsBitmask()
        {
            this._isBitmask = TypeConstants.BooleanNull;
        }
        #endregion
        
        #region Message Methods
        /// <summary>
        /// Creates a new instance of message.
        /// <returns>New instance of message of the same type as this.</returns>
        /// </summary>
        protected override IRecordInterface CreateInstance()
        {
            return new EnumClassDescriptor();
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        IEnumClassDescriptorInfo IEnumClassDescriptorInfo.Clone()
        {
            return ((IEnumClassDescriptorInfo)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        IEnumClassDescriptorInterface IEnumClassDescriptorInterface.Clone()
        {
            return ((IEnumClassDescriptorInterface)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        public new EnumClassDescriptor Clone()
        {
            return ((EnumClassDescriptor)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        protected override IRecordInterface CopyFromImpl(IRecordInfo source)
        {
            base.CopyFromImpl(source);
            if (typeof(IEnumClassDescriptorInfo).IsInstanceOfType(source))
            {
                IEnumClassDescriptorInfo typedSource = ((IEnumClassDescriptorInfo)(source));
                if ((typedSource.Values != null))
                {
                    this.Values = new List<IEnumValueInterface>(typedSource.Values.Count);
                    int i;
                    for (i = 0; (i < typedSource.Values.Count); i = (i + 1))
                    {
                        IEnumValueInfo item = typedSource.Values[i];
                        if ((item == null))
                        {
                            this.Values.Add(null);
                        }
                        else
                        {
                            this.Values.Add(((IEnumValueInterface)(item.Clone())));
                        }
                    }
                }
                else
                {
                    this.Values = null;
                }
                if ((typedSource.HasIsBitmask() == true))
                {
                    this.IsBitmask = typedSource.IsBitmask;
                }
                else
                {
                    this.NullifyIsBitmask();
                }
            }
            return this;
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        IEnumClassDescriptorInterface IEnumClassDescriptorInterface.CopyFrom(IRecordInfo source)
        {
            return ((IEnumClassDescriptorInterface)(this.CopyFromImpl(source)));
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        public new EnumClassDescriptor CopyFrom(IRecordInfo source)
        {
            return ((EnumClassDescriptor)(this.CopyFromImpl(source)));
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        protected override IRecordInterface NullifyImpl()
        {
            base.NullifyImpl();
            this.NullifyValues();
            this.NullifyIsBitmask();
            return this;
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        IEnumClassDescriptorInterface IEnumClassDescriptorInterface.Nullify()
        {
            return ((IEnumClassDescriptorInterface)(this.NullifyImpl()));
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        public new EnumClassDescriptor Nullify()
        {
            return ((EnumClassDescriptor)(this.NullifyImpl()));
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        protected override IRecordInterface ResetImpl()
        {
            base.ResetImpl();
            this._values = null;
            this._isBitmask = TypeConstants.BooleanNull;
            return this;
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        IEnumClassDescriptorInterface IEnumClassDescriptorInterface.Reset()
        {
            return ((IEnumClassDescriptorInterface)(this.ResetImpl()));
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        public new EnumClassDescriptor Reset()
        {
            return ((EnumClassDescriptor)(this.ResetImpl()));
        }
        #endregion
        
        #region Standard Methods
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public virtual bool Equals(EnumClassDescriptor obj)
        {
            if ((obj == null))
            {
                return false;
            }
            if (((this.Values != null) 
                        && (obj.Values != null)))
            {
                if ((this.Values.Count != obj.Values.Count))
                {
                    return false;
                }
                int i;
                for (i = 0; (i < obj.Values.Count); i = (i + 1))
                {
                    if (((this.Values[i] != null) 
                                && (obj.Values[i] != null)))
                    {
                        if ((this.Values[i].Equals(obj.Values[i]) != true))
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if ((this.Values[i] != obj.Values[i]))
                        {
                            return false;
                        }
                    }
                }
            }
            else
            {
                if ((this.Values != obj.Values))
                {
                    return false;
                }
            }
            if (((this.HasIsBitmask() != obj.HasIsBitmask()) 
                        || (this.IsBitmask != obj.IsBitmask)))
            {
                return false;
            }
            return base.Equals(obj);
        }
        
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public override bool Equals(object obj)
        {
            if ((typeof(EnumClassDescriptor).IsInstanceOfType(obj) == false))
            {
                return false;
            }
            return this.Equals(((EnumClassDescriptor)(obj)));
        }
        
        /// <summary>
        /// Calculates a hash code for the current object.
        /// <returns>A hash code for the current object.</returns>
        /// </summary>
        public override int GetHashCode()
        {
            unchecked
            {
            int hash = ((int)(2166136261u));
            if ((this.Values == null))
            {
                hash = ((hash * 16777619) 
                            + 0);
            }
            else
            {
                int i;
                for (i = 0; (i < this.Values.Count); i = (i + 1))
                {
                    if ((this.Values[i] == null))
                    {
                        hash = ((hash * 16777619) 
                                    + 0);
                    }
                    else
                    {
                        hash = ((hash * 16777619) 
                                    + this.Values[i].GetHashCode());
                    }
                }
            }
            hash = ((hash * 16777619) 
                        + this.IsBitmask.GetHashCode());
            return ((hash * 16777619) 
                        + base.GetHashCode());
            }
        }
        
        /// <summary>
        /// Appends an object state to a given StringBuilder in a form of JSON.
        /// <returns>A StringBuilder that was used to append the object to.</returns>
        /// </summary>
        public override System.Text.StringBuilder ToString(System.Text.StringBuilder builder)
        {
            builder.Append("{ \"$type\":  \"EnumClassDescriptor\"");
            if (this.HasValues())
            {
                builder.Append(", \"Values\": [");
                int i;
                for (i = 0; (i < this.Values.Count); i = (i + 1))
                {
                    if ((i != 0))
                    {
                        builder.Append(",");
                    }
                    this.Values[i].ToString(builder);
                }
                builder.Append("]");
            }
            if (this.HasIsBitmask())
            {
                builder.Append(", \"IsBitmask\": ");
                builder.Append(this.IsBitmask);
            }
            if (this.HasGuid())
            {
                builder.Append(", \"Guid\": \"");
                builder.Append(this.Guid);
                builder.Append("\"");
            }
            if (this.HasName())
            {
                builder.Append(", \"Name\": \"");
                builder.Append(this.Name);
                builder.Append("\"");
            }
            if (this.HasTitle())
            {
                builder.Append(", \"Title\": \"");
                builder.Append(this.Title);
                builder.Append("\"");
            }
            if (this.HasDescription())
            {
                builder.Append(", \"Description\": \"");
                builder.Append(this.Description);
                builder.Append("\"");
            }
            builder.Append("}");
            return builder;
        }
        
        /// <summary>
        /// Returns a string that represents the current object.
        /// <returns>A string that represents the current object.</returns>
        /// </summary>
        public override string ToString()
        {
            return this.ToString(new System.Text.StringBuilder()).ToString();
        }
        #endregion
    }
}