//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using EPAM.Deltix.Timebase.Messages;
using System;


namespace EPAM.Deltix.Timebase.Messages.Schema
{
    
    
    /// <summary>
    /// This is a base class for schema data field.
    /// </summary>
    [SchemaElement(Name="com.epam.deltix.timebase.messages.schema.DataField", Title="DataField", Description=null)]
    public abstract class DataField : NamedDescriptor, IDataFieldInterface
    {
        
        public new static string ClassName = "com.epam.deltix.timebase.messages.schema.DataField";
        
        private IDataTypeInterface _dataType = null;
        
        /// <summary>
        /// Creates an instance of DataField object.
        /// </summary>
        public DataField()
        {
        }
        
        #region Properties
        /// <summary>
        /// Data type of a field.
        /// </summary>
        [SchemaIgnore()]
        IDataTypeInfo IDataFieldInfo.DataType
        {
            get
            {
                return this._dataType;
            }
        }
        
        /// <summary>
        /// Data type of a field.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaType(Encoding=null, IsNullable=false, DataType=SchemaDataType.Object, Minimum=null, Maximum=null, NestedTypes=new Type[] {
                typeof(ArrayDataType),
                typeof(BinaryDataType),
                typeof(BooleanDataType),
                typeof(CharDataType),
                typeof(ClassDataType),
                typeof(DateTimeDataType),
                typeof(EnumDataType),
                typeof(FloatDataType),
                typeof(IntegerDataType),
                typeof(TimeOfDayDataType),
                typeof(VarcharDataType)})]
        public virtual IDataTypeInterface DataType
        {
            get
            {
                return this._dataType;
            }
            set
            {
                this._dataType = value;
            }
        }
        #endregion
        
        #region Property Helpers
        /// <summary>
        /// Flag that indicates whether property DataType has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasDataType()
        {
            return (this._dataType != null);
        }
        
        /// <summary>
        /// Sets null to DataType property.
        /// </summary>
        public void NullifyDataType()
        {
            this._dataType = null;
        }
        #endregion
        
        #region Message Methods
        /// <summary>
        /// Creates a new instance of message.
        /// <returns>New instance of message of the same type as this.</returns>
        /// </summary>
        protected override IRecordInterface CreateInstance()
        {
            throw new System.InvalidOperationException("Cannot create an instance of abstract class.");
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        IDataFieldInfo IDataFieldInfo.Clone()
        {
            return ((IDataFieldInfo)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        IDataFieldInterface IDataFieldInterface.Clone()
        {
            return ((IDataFieldInterface)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        public new DataField Clone()
        {
            return ((DataField)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        protected override IRecordInterface CopyFromImpl(IRecordInfo source)
        {
            base.CopyFromImpl(source);
            if (typeof(IDataFieldInfo).IsInstanceOfType(source))
            {
                IDataFieldInfo typedSource = ((IDataFieldInfo)(source));
                if ((typedSource.DataType != null))
                {
                    if (((this.DataType == null) 
                                || (this.DataType.GetType() == typedSource.DataType.GetType())))
                    {
                        this.DataType = ((DataType)(typedSource.DataType.Clone()));
                    }
                    else
                    {
                        this.DataType.CopyFrom(typedSource.DataType);
                    }
                }
                else
                {
                    this.DataType = null;
                }
            }
            return this;
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        IDataFieldInterface IDataFieldInterface.CopyFrom(IRecordInfo source)
        {
            return ((IDataFieldInterface)(this.CopyFromImpl(source)));
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        public new DataField CopyFrom(IRecordInfo source)
        {
            return ((DataField)(this.CopyFromImpl(source)));
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        protected override IRecordInterface NullifyImpl()
        {
            base.NullifyImpl();
            this.NullifyDataType();
            return this;
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        IDataFieldInterface IDataFieldInterface.Nullify()
        {
            return ((IDataFieldInterface)(this.NullifyImpl()));
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        public new DataField Nullify()
        {
            return ((DataField)(this.NullifyImpl()));
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        protected override IRecordInterface ResetImpl()
        {
            base.ResetImpl();
            this._dataType = null;
            return this;
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        IDataFieldInterface IDataFieldInterface.Reset()
        {
            return ((IDataFieldInterface)(this.ResetImpl()));
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        public new DataField Reset()
        {
            return ((DataField)(this.ResetImpl()));
        }
        #endregion
        
        #region Standard Methods
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public virtual bool Equals(DataField obj)
        {
            if ((obj == null))
            {
                return false;
            }
            if (((this.DataType != null) 
                        && (obj.DataType != null)))
            {
                if ((this.DataType.Equals(obj.DataType) != true))
                {
                    return false;
                }
            }
            else
            {
                if ((this.DataType != obj.DataType))
                {
                    return false;
                }
            }
            return base.Equals(obj);
        }
        
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public override bool Equals(object obj)
        {
            if ((typeof(DataField).IsInstanceOfType(obj) == false))
            {
                return false;
            }
            return this.Equals(((DataField)(obj)));
        }
        
        /// <summary>
        /// Calculates a hash code for the current object.
        /// <returns>A hash code for the current object.</returns>
        /// </summary>
        public override int GetHashCode()
        {
            unchecked
            {
            int hash = ((int)(2166136261u));
            if ((this.DataType == null))
            {
                hash = ((hash * 16777619) 
                            + 0);
            }
            else
            {
                hash = ((hash * 16777619) 
                            + this.DataType.GetHashCode());
            }
            return ((hash * 16777619) 
                        + base.GetHashCode());
            }
        }
        
        /// <summary>
        /// Appends an object state to a given StringBuilder in a form of JSON.
        /// <returns>A StringBuilder that was used to append the object to.</returns>
        /// </summary>
        public override System.Text.StringBuilder ToString(System.Text.StringBuilder builder)
        {
            builder.Append("{ \"$type\":  \"DataField\"");
            if (this.HasDataType())
            {
                builder.Append(", \"DataType\": {");
                this.DataType.ToString(builder);
                builder.Append("}");
            }
            if (this.HasName())
            {
                builder.Append(", \"Name\": \"");
                builder.Append(this.Name);
                builder.Append("\"");
            }
            if (this.HasTitle())
            {
                builder.Append(", \"Title\": \"");
                builder.Append(this.Title);
                builder.Append("\"");
            }
            if (this.HasDescription())
            {
                builder.Append(", \"Description\": \"");
                builder.Append(this.Description);
                builder.Append("\"");
            }
            builder.Append("}");
            return builder;
        }
        
        /// <summary>
        /// Returns a string that represents the current object.
        /// <returns>A string that represents the current object.</returns>
        /// </summary>
        public override string ToString()
        {
            return this.ToString(new System.Text.StringBuilder()).ToString();
        }
        #endregion
    }
}
