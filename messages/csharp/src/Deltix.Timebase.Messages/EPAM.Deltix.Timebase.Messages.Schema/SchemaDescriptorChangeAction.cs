//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using EPAM.Deltix.Timebase.Messages;
using System;
using System.Collections.Generic;


namespace EPAM.Deltix.Timebase.Messages.Schema
{
    
    
    /// <summary>
    /// Class which defines a change to schema descriptor.
    /// </summary>
    [SchemaElement(Name="com.epam.deltix.timebase.messages.schema.SchemaDescriptorChangeAction", Title="SchemaDescriptorChangeAction", Description=null)]
    public class SchemaDescriptorChangeAction : ISchemaDescriptorChangeActionInterface, IRecordInterface, ICloneable
    {
        
        public static string ClassName = "com.epam.deltix.timebase.messages.schema.SchemaDescriptorChangeAction";
        
        private IClassDescriptorInterface _previousState = null;
        
        private IClassDescriptorInterface _newState = null;
        
        private SchemaDescriptorChangeType _changeTypes = ((SchemaDescriptorChangeType)(TypeConstants.EnumNull));
        
        private ISchemaDescriptorTransformationInterface _descriptorTransformation = null;
        
        private IList<ISchemaFieldChangeActionInterface> _fieldChangeActions = null;
        
        /// <summary>
        /// Creates an instance of SchemaDescriptorChangeAction object.
        /// </summary>
        public SchemaDescriptorChangeAction()
        {
        }
        
        #region Properties
        /// <summary>
        /// Previous descriptor state.
        /// </summary>
        [SchemaIgnore()]
        IClassDescriptorInfo ISchemaDescriptorChangeActionInfo.PreviousState
        {
            get
            {
                return this._previousState;
            }
        }
        
        /// <summary>
        /// Previous descriptor state.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaType(Encoding=null, IsNullable=true, DataType=SchemaDataType.Object, Minimum=null, Maximum=null, NestedTypes=new Type[] {
                typeof(RecordClassDescriptor),
                typeof(EnumClassDescriptor)})]
        public virtual IClassDescriptorInterface PreviousState
        {
            get
            {
                return this._previousState;
            }
            set
            {
                this._previousState = value;
            }
        }
        
        /// <summary>
        /// New descriptor state.
        /// </summary>
        [SchemaIgnore()]
        IClassDescriptorInfo ISchemaDescriptorChangeActionInfo.NewState
        {
            get
            {
                return this._newState;
            }
        }
        
        /// <summary>
        /// New descriptor state.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaType(Encoding=null, IsNullable=true, DataType=SchemaDataType.Object, Minimum=null, Maximum=null, NestedTypes=new Type[] {
                typeof(RecordClassDescriptor),
                typeof(EnumClassDescriptor)})]
        public virtual IClassDescriptorInterface NewState
        {
            get
            {
                return this._newState;
            }
            set
            {
                this._newState = value;
            }
        }
        
        /// <summary>
        /// Bitmask that defines the changes that were applied to the descriptor.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaType(Encoding=null, IsNullable=false, DataType=SchemaDataType.Default, Minimum=null, Maximum=null, NestedTypes=new Type[0])]
        public virtual SchemaDescriptorChangeType ChangeTypes
        {
            get
            {
                return this._changeTypes;
            }
            set
            {
                this._changeTypes = value;
            }
        }
        
        /// <summary>
        /// Defines the data transformation that was applied to the descriptor.
        /// </summary>
        [SchemaIgnore()]
        ISchemaDescriptorTransformationInfo ISchemaDescriptorChangeActionInfo.DescriptorTransformation
        {
            get
            {
                return this._descriptorTransformation;
            }
        }
        
        /// <summary>
        /// Defines the data transformation that was applied to the descriptor.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaType(Encoding=null, IsNullable=true, DataType=SchemaDataType.Object, Minimum=null, Maximum=null, NestedTypes=new Type[] {
                typeof(SchemaDescriptorTransformation)})]
        public virtual ISchemaDescriptorTransformationInterface DescriptorTransformation
        {
            get
            {
                return this._descriptorTransformation;
            }
            set
            {
                this._descriptorTransformation = value;
            }
        }
        
        /// <summary>
        /// A list of change actions to data fields.
        /// Populated only if ChangeTypes contains ALTER flag
        /// </summary>
        [SchemaIgnore()]
        IReadOnlyList<ISchemaFieldChangeActionInfo> ISchemaDescriptorChangeActionInfo.FieldChangeActions
        {
            get
            {
                return ((IReadOnlyList<ISchemaFieldChangeActionInterface>)(this._fieldChangeActions));
            }
        }
        
        /// <summary>
        /// A list of change actions to data fields.
        /// Populated only if ChangeTypes contains ALTER flag
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaArrayType(IsNullable=true, IsElementNullable=false, ElementEncoding=null, ElementDataType=SchemaDataType.Default, ElementMinimum=null, ElementMaximum=null, ElementTypes=new Type[] {
                typeof(SchemaFieldChangeAction)})]
        public virtual IList<ISchemaFieldChangeActionInterface> FieldChangeActions
        {
            get
            {
                return this._fieldChangeActions;
            }
            set
            {
                if (((value == null) 
                            || (typeof(IReadOnlyList<ISchemaFieldChangeActionInterface>).IsInstanceOfType(value) == true)))
                {
                    this._fieldChangeActions = value;
                }
                else
                {
                    throw new System.InvalidOperationException("Assigned value must implement IReadOnlyList<ISchemaFieldChangeActionInterface> in" +
                            "terface.");
                }
            }
        }
        #endregion
        
        #region Property Helpers
        /// <summary>
        /// Flag that indicates whether property PreviousState has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasPreviousState()
        {
            return (this._previousState != null);
        }
        
        /// <summary>
        /// Sets null to PreviousState property.
        /// </summary>
        public void NullifyPreviousState()
        {
            this._previousState = null;
        }
        
        /// <summary>
        /// Flag that indicates whether property NewState has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasNewState()
        {
            return (this._newState != null);
        }
        
        /// <summary>
        /// Sets null to NewState property.
        /// </summary>
        public void NullifyNewState()
        {
            this._newState = null;
        }
        
        /// <summary>
        /// Flag that indicates whether property ChangeTypes has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasChangeTypes()
        {
            return (this._changeTypes != ((SchemaDescriptorChangeType)(TypeConstants.EnumNull)));
        }
        
        /// <summary>
        /// Sets null to ChangeTypes property.
        /// </summary>
        public void NullifyChangeTypes()
        {
            this._changeTypes = ((SchemaDescriptorChangeType)(TypeConstants.EnumNull));
        }
        
        /// <summary>
        /// Flag that indicates whether property DescriptorTransformation has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasDescriptorTransformation()
        {
            return (this._descriptorTransformation != null);
        }
        
        /// <summary>
        /// Sets null to DescriptorTransformation property.
        /// </summary>
        public void NullifyDescriptorTransformation()
        {
            this._descriptorTransformation = null;
        }
        
        /// <summary>
        /// Flag that indicates whether property FieldChangeActions has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasFieldChangeActions()
        {
            return (this._fieldChangeActions != null);
        }
        
        /// <summary>
        /// Sets null to FieldChangeActions property.
        /// </summary>
        public void NullifyFieldChangeActions()
        {
            this._fieldChangeActions = null;
        }
        #endregion
        
        #region Message Methods
        /// <summary>
        /// Creates a new instance of message.
        /// <returns>New instance of message of the same type as this.</returns>
        /// </summary>
        protected virtual IRecordInterface CreateInstance()
        {
            return new SchemaDescriptorChangeAction();
        }
        
        /// <summary>
        /// Creates a new instance of message.
        /// <returns>New instance of message of the same type as this.</returns>
        /// </summary>
        protected virtual IRecordInfo CloneImpl()
        {
            IRecordInterface message = this.CreateInstance();
            message.CopyFrom(this);
            return message;
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        object System.ICloneable.Clone()
        {
            return ((object)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        IRecordInterface IRecordInterface.Clone()
        {
            return ((IRecordInterface)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        IRecordInfo IRecordInfo.Clone()
        {
            return ((IRecordInfo)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        ISchemaDescriptorChangeActionInfo ISchemaDescriptorChangeActionInfo.Clone()
        {
            return ((ISchemaDescriptorChangeActionInfo)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        ISchemaDescriptorChangeActionInterface ISchemaDescriptorChangeActionInterface.Clone()
        {
            return ((ISchemaDescriptorChangeActionInterface)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        public SchemaDescriptorChangeAction Clone()
        {
            return ((SchemaDescriptorChangeAction)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        protected virtual IRecordInterface CopyFromImpl(IRecordInfo source)
        {
            if (typeof(ISchemaDescriptorChangeActionInfo).IsInstanceOfType(source))
            {
                ISchemaDescriptorChangeActionInfo typedSource = ((ISchemaDescriptorChangeActionInfo)(source));
                if ((typedSource.PreviousState != null))
                {
                    if (((this.PreviousState == null) 
                                || (this.PreviousState.GetType() == typedSource.PreviousState.GetType())))
                    {
                        this.PreviousState = ((ClassDescriptor)(typedSource.PreviousState.Clone()));
                    }
                    else
                    {
                        this.PreviousState.CopyFrom(typedSource.PreviousState);
                    }
                }
                else
                {
                    this.PreviousState = null;
                }
                if ((typedSource.NewState != null))
                {
                    if (((this.NewState == null) 
                                || (this.NewState.GetType() == typedSource.NewState.GetType())))
                    {
                        this.NewState = ((ClassDescriptor)(typedSource.NewState.Clone()));
                    }
                    else
                    {
                        this.NewState.CopyFrom(typedSource.NewState);
                    }
                }
                else
                {
                    this.NewState = null;
                }
                this.ChangeTypes = typedSource.ChangeTypes;
                if ((typedSource.DescriptorTransformation != null))
                {
                    if (((this.DescriptorTransformation == null) 
                                || (this.DescriptorTransformation.GetType() == typedSource.DescriptorTransformation.GetType())))
                    {
                        this.DescriptorTransformation = ((SchemaDescriptorTransformation)(typedSource.DescriptorTransformation.Clone()));
                    }
                    else
                    {
                        this.DescriptorTransformation.CopyFrom(typedSource.DescriptorTransformation);
                    }
                }
                else
                {
                    this.DescriptorTransformation = null;
                }
                if ((typedSource.FieldChangeActions != null))
                {
                    this.FieldChangeActions = new List<ISchemaFieldChangeActionInterface>(typedSource.FieldChangeActions.Count);
                    int i;
                    for (i = 0; (i < typedSource.FieldChangeActions.Count); i = (i + 1))
                    {
                        ISchemaFieldChangeActionInfo item = typedSource.FieldChangeActions[i];
                        if ((item == null))
                        {
                            this.FieldChangeActions.Add(null);
                        }
                        else
                        {
                            this.FieldChangeActions.Add(((ISchemaFieldChangeActionInterface)(item.Clone())));
                        }
                    }
                }
                else
                {
                    this.FieldChangeActions = null;
                }
            }
            return this;
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        IRecordInterface IRecordInterface.CopyFrom(IRecordInfo source)
        {
            return ((IRecordInterface)(this.CopyFromImpl(source)));
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        ISchemaDescriptorChangeActionInterface ISchemaDescriptorChangeActionInterface.CopyFrom(IRecordInfo source)
        {
            return ((ISchemaDescriptorChangeActionInterface)(this.CopyFromImpl(source)));
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        public SchemaDescriptorChangeAction CopyFrom(IRecordInfo source)
        {
            return ((SchemaDescriptorChangeAction)(this.CopyFromImpl(source)));
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        protected virtual IRecordInterface NullifyImpl()
        {
            this.NullifyPreviousState();
            this.NullifyNewState();
            this.NullifyChangeTypes();
            this.NullifyDescriptorTransformation();
            this.NullifyFieldChangeActions();
            return this;
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        IRecordInterface IRecordInterface.Nullify()
        {
            return ((IRecordInterface)(this.NullifyImpl()));
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        ISchemaDescriptorChangeActionInterface ISchemaDescriptorChangeActionInterface.Nullify()
        {
            return ((ISchemaDescriptorChangeActionInterface)(this.NullifyImpl()));
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        public SchemaDescriptorChangeAction Nullify()
        {
            return ((SchemaDescriptorChangeAction)(this.NullifyImpl()));
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        protected virtual IRecordInterface ResetImpl()
        {
            this._previousState = null;
            this._newState = null;
            this._changeTypes = ((SchemaDescriptorChangeType)(TypeConstants.EnumNull));
            this._descriptorTransformation = null;
            this._fieldChangeActions = null;
            return this;
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        IRecordInterface IRecordInterface.Reset()
        {
            return ((IRecordInterface)(this.ResetImpl()));
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        ISchemaDescriptorChangeActionInterface ISchemaDescriptorChangeActionInterface.Reset()
        {
            return ((ISchemaDescriptorChangeActionInterface)(this.ResetImpl()));
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        public SchemaDescriptorChangeAction Reset()
        {
            return ((SchemaDescriptorChangeAction)(this.ResetImpl()));
        }
        #endregion
        
        #region Standard Methods
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public virtual bool Equals(SchemaDescriptorChangeAction obj)
        {
            if ((obj == null))
            {
                return false;
            }
            if (((this.PreviousState != null) 
                        && (obj.PreviousState != null)))
            {
                if ((this.PreviousState.Equals(obj.PreviousState) != true))
                {
                    return false;
                }
            }
            else
            {
                if ((this.PreviousState != obj.PreviousState))
                {
                    return false;
                }
            }
            if (((this.NewState != null) 
                        && (obj.NewState != null)))
            {
                if ((this.NewState.Equals(obj.NewState) != true))
                {
                    return false;
                }
            }
            else
            {
                if ((this.NewState != obj.NewState))
                {
                    return false;
                }
            }
            if ((this.ChangeTypes != obj.ChangeTypes))
            {
                return false;
            }
            if (((this.DescriptorTransformation != null) 
                        && (obj.DescriptorTransformation != null)))
            {
                if ((this.DescriptorTransformation.Equals(obj.DescriptorTransformation) != true))
                {
                    return false;
                }
            }
            else
            {
                if ((this.DescriptorTransformation != obj.DescriptorTransformation))
                {
                    return false;
                }
            }
            if (((this.FieldChangeActions != null) 
                        && (obj.FieldChangeActions != null)))
            {
                if ((this.FieldChangeActions.Count != obj.FieldChangeActions.Count))
                {
                    return false;
                }
                int i;
                for (i = 0; (i < obj.FieldChangeActions.Count); i = (i + 1))
                {
                    if (((this.FieldChangeActions[i] != null) 
                                && (obj.FieldChangeActions[i] != null)))
                    {
                        if ((this.FieldChangeActions[i].Equals(obj.FieldChangeActions[i]) != true))
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if ((this.FieldChangeActions[i] != obj.FieldChangeActions[i]))
                        {
                            return false;
                        }
                    }
                }
            }
            else
            {
                if ((this.FieldChangeActions != obj.FieldChangeActions))
                {
                    return false;
                }
            }
            return true;
        }
        
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public override bool Equals(object obj)
        {
            if ((typeof(SchemaDescriptorChangeAction).IsInstanceOfType(obj) == false))
            {
                return false;
            }
            return this.Equals(((SchemaDescriptorChangeAction)(obj)));
        }
        
        /// <summary>
        /// Calculates a hash code for the current object.
        /// <returns>A hash code for the current object.</returns>
        /// </summary>
        public override int GetHashCode()
        {
            unchecked
            {
            int hash = ((int)(2166136261u));
            if ((this.PreviousState == null))
            {
                hash = ((hash * 16777619) 
                            + 0);
            }
            else
            {
                hash = ((hash * 16777619) 
                            + this.PreviousState.GetHashCode());
            }
            if ((this.NewState == null))
            {
                hash = ((hash * 16777619) 
                            + 0);
            }
            else
            {
                hash = ((hash * 16777619) 
                            + this.NewState.GetHashCode());
            }
            hash = ((hash * 16777619) 
                        + this.ChangeTypes.GetHashCode());
            if ((this.DescriptorTransformation == null))
            {
                hash = ((hash * 16777619) 
                            + 0);
            }
            else
            {
                hash = ((hash * 16777619) 
                            + this.DescriptorTransformation.GetHashCode());
            }
            if ((this.FieldChangeActions == null))
            {
                hash = ((hash * 16777619) 
                            + 0);
            }
            else
            {
                int i;
                for (i = 0; (i < this.FieldChangeActions.Count); i = (i + 1))
                {
                    if ((this.FieldChangeActions[i] == null))
                    {
                        hash = ((hash * 16777619) 
                                    + 0);
                    }
                    else
                    {
                        hash = ((hash * 16777619) 
                                    + this.FieldChangeActions[i].GetHashCode());
                    }
                }
            }
            return hash;
            }
        }
        
        /// <summary>
        /// Appends an object state to a given StringBuilder in a form of JSON.
        /// <returns>A StringBuilder that was used to append the object to.</returns>
        /// </summary>
        public virtual System.Text.StringBuilder ToString(System.Text.StringBuilder builder)
        {
            builder.Append("{ \"$type\":  \"SchemaDescriptorChangeAction\"");
            if (this.HasPreviousState())
            {
                builder.Append(", \"PreviousState\": {");
                this.PreviousState.ToString(builder);
                builder.Append("}");
            }
            if (this.HasNewState())
            {
                builder.Append(", \"NewState\": {");
                this.NewState.ToString(builder);
                builder.Append("}");
            }
            if (this.HasChangeTypes())
            {
                builder.Append(", \"ChangeTypes\": \"");
                builder.Append(this.ChangeTypes);
                builder.Append("\"");
            }
            if (this.HasDescriptorTransformation())
            {
                builder.Append(", \"DescriptorTransformation\": {");
                this.DescriptorTransformation.ToString(builder);
                builder.Append("}");
            }
            if (this.HasFieldChangeActions())
            {
                builder.Append(", \"FieldChangeActions\": [");
                int i;
                for (i = 0; (i < this.FieldChangeActions.Count); i = (i + 1))
                {
                    if ((i != 0))
                    {
                        builder.Append(",");
                    }
                    this.FieldChangeActions[i].ToString(builder);
                }
                builder.Append("]");
            }
            builder.Append("}");
            return builder;
        }
        
        /// <summary>
        /// Returns a string that represents the current object.
        /// <returns>A string that represents the current object.</returns>
        /// </summary>
        public override string ToString()
        {
            return this.ToString(new System.Text.StringBuilder()).ToString();
        }
        #endregion
    }
}
