//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using EPAM.Deltix.Timebase.Messages;
using System;
using System.Collections.Generic;


namespace EPAM.Deltix.Timebase.Messages.Schema
{
    
    
    /// <summary>
    /// Schema definition for a class.
    /// </summary>
    [SchemaElement(Name="com.epam.deltix.timebase.messages.schema.RecordClassDescriptor", Title="RecordClassDescriptor", Description=null)]
    public class RecordClassDescriptor : ClassDescriptor, IRecordClassDescriptorInterface
    {
        
        public new static string ClassName = "com.epam.deltix.timebase.messages.schema.RecordClassDescriptor";
        
        private IRecordClassDescriptorInterface _parent = null;
        
        private SByte _isAbstract = TypeConstants.BooleanNull;
        
        private SByte _isContentClass = TypeConstants.BooleanNull;
        
        private IList<IDataFieldInterface> _dataFields = null;
        
        /// <summary>
        /// Creates an instance of RecordClassDescriptor object.
        /// </summary>
        public RecordClassDescriptor()
        {
        }
        
        #region Properties
        /// <summary>
        /// Defines parent RecordClassDescriptor if exist.
        /// </summary>
        [SchemaIgnore()]
        IRecordClassDescriptorInfo IRecordClassDescriptorInfo.Parent
        {
            get
            {
                return this._parent;
            }
        }
        
        /// <summary>
        /// Defines parent RecordClassDescriptor if exist.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaType(Encoding=null, IsNullable=true, DataType=SchemaDataType.Object, Minimum=null, Maximum=null, NestedTypes=new Type[] {
                typeof(RecordClassDescriptor)})]
        public virtual IRecordClassDescriptorInterface Parent
        {
            get
            {
                return this._parent;
            }
            set
            {
                this._parent = value;
            }
        }
        
        /// <summary>
        /// Defines if current RecordClassDescriptor is abstract.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaType(Encoding=null, IsNullable=false, DataType=SchemaDataType.Default, Minimum=null, Maximum=null, NestedTypes=new Type[0])]
        public virtual Boolean IsAbstract
        {
            get
            {
                if ((this._isAbstract == TypeConstants.BooleanTrue))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            set
            {
                if ((value == true))
                {
                    this._isAbstract = TypeConstants.BooleanTrue;
                }
                else
                {
                    this._isAbstract = TypeConstants.BooleanFalse;
                }
            }
        }
        
        /// <summary>
        /// Defines if current RecordClassDescriptor is content class.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaType(Encoding=null, IsNullable=false, DataType=SchemaDataType.Default, Minimum=null, Maximum=null, NestedTypes=new Type[0])]
        public virtual Boolean IsContentClass
        {
            get
            {
                if ((this._isContentClass == TypeConstants.BooleanTrue))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            set
            {
                if ((value == true))
                {
                    this._isContentClass = TypeConstants.BooleanTrue;
                }
                else
                {
                    this._isContentClass = TypeConstants.BooleanFalse;
                }
            }
        }
        
        /// <summary>
        /// List of fields of a class.
        /// </summary>
        [SchemaIgnore()]
        IReadOnlyList<IDataFieldInfo> IRecordClassDescriptorInfo.DataFields
        {
            get
            {
                return ((IReadOnlyList<IDataFieldInterface>)(this._dataFields));
            }
        }
        
        /// <summary>
        /// List of fields of a class.
        /// </summary>
        [SchemaElement(Name=null, Title=null, Description=null)]
        [SchemaArrayType(IsNullable=false, IsElementNullable=false, ElementEncoding=null, ElementDataType=SchemaDataType.Default, ElementMinimum=null, ElementMaximum=null, ElementTypes=new Type[] {
                typeof(StaticDataField),
                typeof(NonStaticDataField)})]
        public virtual IList<IDataFieldInterface> DataFields
        {
            get
            {
                return this._dataFields;
            }
            set
            {
                if (((value == null) 
                            || (typeof(IReadOnlyList<IDataFieldInterface>).IsInstanceOfType(value) == true)))
                {
                    this._dataFields = value;
                }
                else
                {
                    throw new System.InvalidOperationException("Assigned value must implement IReadOnlyList<IDataFieldInterface> interface.");
                }
            }
        }
        #endregion
        
        #region Property Helpers
        /// <summary>
        /// Flag that indicates whether property Parent has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasParent()
        {
            return (this._parent != null);
        }
        
        /// <summary>
        /// Sets null to Parent property.
        /// </summary>
        public void NullifyParent()
        {
            this._parent = null;
        }
        
        /// <summary>
        /// Flag that indicates whether property IsAbstract has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasIsAbstract()
        {
            return (this._isAbstract != TypeConstants.BooleanNull);
        }
        
        /// <summary>
        /// Sets null to IsAbstract property.
        /// </summary>
        public void NullifyIsAbstract()
        {
            this._isAbstract = TypeConstants.BooleanNull;
        }
        
        /// <summary>
        /// Flag that indicates whether property IsContentClass has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasIsContentClass()
        {
            return (this._isContentClass != TypeConstants.BooleanNull);
        }
        
        /// <summary>
        /// Sets null to IsContentClass property.
        /// </summary>
        public void NullifyIsContentClass()
        {
            this._isContentClass = TypeConstants.BooleanNull;
        }
        
        /// <summary>
        /// Flag that indicates whether property DataFields has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasDataFields()
        {
            return (this._dataFields != null);
        }
        
        /// <summary>
        /// Sets null to DataFields property.
        /// </summary>
        public void NullifyDataFields()
        {
            this._dataFields = null;
        }
        #endregion
        
        #region Message Methods
        /// <summary>
        /// Creates a new instance of message.
        /// <returns>New instance of message of the same type as this.</returns>
        /// </summary>
        protected override IRecordInterface CreateInstance()
        {
            return new RecordClassDescriptor();
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        IRecordClassDescriptorInfo IRecordClassDescriptorInfo.Clone()
        {
            return ((IRecordClassDescriptorInfo)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        IRecordClassDescriptorInterface IRecordClassDescriptorInterface.Clone()
        {
            return ((IRecordClassDescriptorInterface)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Creates copy of this instance.
        /// <returns>Copy.</returns>
        /// </summary>
        public new RecordClassDescriptor Clone()
        {
            return ((RecordClassDescriptor)(this.CloneImpl()));
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        protected override IRecordInterface CopyFromImpl(IRecordInfo source)
        {
            base.CopyFromImpl(source);
            if (typeof(IRecordClassDescriptorInfo).IsInstanceOfType(source))
            {
                IRecordClassDescriptorInfo typedSource = ((IRecordClassDescriptorInfo)(source));
                if ((typedSource.Parent != null))
                {
                    if (((this.Parent == null) 
                                || (this.Parent.GetType() == typedSource.Parent.GetType())))
                    {
                        this.Parent = ((RecordClassDescriptor)(typedSource.Parent.Clone()));
                    }
                    else
                    {
                        this.Parent.CopyFrom(typedSource.Parent);
                    }
                }
                else
                {
                    this.Parent = null;
                }
                if ((typedSource.HasIsAbstract() == true))
                {
                    this.IsAbstract = typedSource.IsAbstract;
                }
                else
                {
                    this.NullifyIsAbstract();
                }
                if ((typedSource.HasIsContentClass() == true))
                {
                    this.IsContentClass = typedSource.IsContentClass;
                }
                else
                {
                    this.NullifyIsContentClass();
                }
                if ((typedSource.DataFields != null))
                {
                    this.DataFields = new List<IDataFieldInterface>(typedSource.DataFields.Count);
                    int i;
                    for (i = 0; (i < typedSource.DataFields.Count); i = (i + 1))
                    {
                        IDataFieldInfo item = typedSource.DataFields[i];
                        if ((item == null))
                        {
                            this.DataFields.Add(null);
                        }
                        else
                        {
                            this.DataFields.Add(((IDataFieldInterface)(item.Clone())));
                        }
                    }
                }
                else
                {
                    this.DataFields = null;
                }
            }
            return this;
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        IRecordClassDescriptorInterface IRecordClassDescriptorInterface.CopyFrom(IRecordInfo source)
        {
            return ((IRecordClassDescriptorInterface)(this.CopyFromImpl(source)));
        }
        
        /// <summary>
        /// Deep copies content from src instance to this.
        /// <param name="source">Source for copy.</param>
        /// <returns>this.</returns>
        /// </summary>
        public new RecordClassDescriptor CopyFrom(IRecordInfo source)
        {
            return ((RecordClassDescriptor)(this.CopyFromImpl(source)));
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        protected override IRecordInterface NullifyImpl()
        {
            base.NullifyImpl();
            this.NullifyParent();
            this.NullifyIsAbstract();
            this.NullifyIsContentClass();
            this.NullifyDataFields();
            return this;
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        IRecordClassDescriptorInterface IRecordClassDescriptorInterface.Nullify()
        {
            return ((IRecordClassDescriptorInterface)(this.NullifyImpl()));
        }
        
        /// <summary>
        /// Set null to all fields of this instance.
        /// <returns>this.</returns>
        /// </summary>
        public new RecordClassDescriptor Nullify()
        {
            return ((RecordClassDescriptor)(this.NullifyImpl()));
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        protected override IRecordInterface ResetImpl()
        {
            base.ResetImpl();
            this._parent = null;
            this._isAbstract = TypeConstants.BooleanNull;
            this._isContentClass = TypeConstants.BooleanNull;
            this._dataFields = null;
            return this;
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        IRecordClassDescriptorInterface IRecordClassDescriptorInterface.Reset()
        {
            return ((IRecordClassDescriptorInterface)(this.ResetImpl()));
        }
        
        /// <summary>
        /// Reset all instance field to their default states.
        /// <returns>this.</returns>
        /// </summary>
        public new RecordClassDescriptor Reset()
        {
            return ((RecordClassDescriptor)(this.ResetImpl()));
        }
        #endregion
        
        #region Standard Methods
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public virtual bool Equals(RecordClassDescriptor obj)
        {
            if ((obj == null))
            {
                return false;
            }
            if (((this.Parent != null) 
                        && (obj.Parent != null)))
            {
                if ((this.Parent.Equals(obj.Parent) != true))
                {
                    return false;
                }
            }
            else
            {
                if ((this.Parent != obj.Parent))
                {
                    return false;
                }
            }
            if (((this.HasIsAbstract() != obj.HasIsAbstract()) 
                        || (this.IsAbstract != obj.IsAbstract)))
            {
                return false;
            }
            if (((this.HasIsContentClass() != obj.HasIsContentClass()) 
                        || (this.IsContentClass != obj.IsContentClass)))
            {
                return false;
            }
            if (((this.DataFields != null) 
                        && (obj.DataFields != null)))
            {
                if ((this.DataFields.Count != obj.DataFields.Count))
                {
                    return false;
                }
                int i;
                for (i = 0; (i < obj.DataFields.Count); i = (i + 1))
                {
                    if (((this.DataFields[i] != null) 
                                && (obj.DataFields[i] != null)))
                    {
                        if ((this.DataFields[i].Equals(obj.DataFields[i]) != true))
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if ((this.DataFields[i] != obj.DataFields[i]))
                        {
                            return false;
                        }
                    }
                }
            }
            else
            {
                if ((this.DataFields != obj.DataFields))
                {
                    return false;
                }
            }
            return base.Equals(obj);
        }
        
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public override bool Equals(object obj)
        {
            if ((typeof(RecordClassDescriptor).IsInstanceOfType(obj) == false))
            {
                return false;
            }
            return this.Equals(((RecordClassDescriptor)(obj)));
        }
        
        /// <summary>
        /// Calculates a hash code for the current object.
        /// <returns>A hash code for the current object.</returns>
        /// </summary>
        public override int GetHashCode()
        {
            unchecked
            {
            int hash = ((int)(2166136261u));
            if ((this.Parent == null))
            {
                hash = ((hash * 16777619) 
                            + 0);
            }
            else
            {
                hash = ((hash * 16777619) 
                            + this.Parent.GetHashCode());
            }
            hash = ((hash * 16777619) 
                        + this.IsAbstract.GetHashCode());
            hash = ((hash * 16777619) 
                        + this.IsContentClass.GetHashCode());
            if ((this.DataFields == null))
            {
                hash = ((hash * 16777619) 
                            + 0);
            }
            else
            {
                int i;
                for (i = 0; (i < this.DataFields.Count); i = (i + 1))
                {
                    if ((this.DataFields[i] == null))
                    {
                        hash = ((hash * 16777619) 
                                    + 0);
                    }
                    else
                    {
                        hash = ((hash * 16777619) 
                                    + this.DataFields[i].GetHashCode());
                    }
                }
            }
            return ((hash * 16777619) 
                        + base.GetHashCode());
            }
        }
        
        /// <summary>
        /// Appends an object state to a given StringBuilder in a form of JSON.
        /// <returns>A StringBuilder that was used to append the object to.</returns>
        /// </summary>
        public override System.Text.StringBuilder ToString(System.Text.StringBuilder builder)
        {
            builder.Append("{ \"$type\":  \"RecordClassDescriptor\"");
            if (this.HasParent())
            {
                builder.Append(", \"Parent\": {");
                this.Parent.ToString(builder);
                builder.Append("}");
            }
            if (this.HasIsAbstract())
            {
                builder.Append(", \"IsAbstract\": ");
                builder.Append(this.IsAbstract);
            }
            if (this.HasIsContentClass())
            {
                builder.Append(", \"IsContentClass\": ");
                builder.Append(this.IsContentClass);
            }
            if (this.HasDataFields())
            {
                builder.Append(", \"DataFields\": [");
                int i;
                for (i = 0; (i < this.DataFields.Count); i = (i + 1))
                {
                    if ((i != 0))
                    {
                        builder.Append(",");
                    }
                    this.DataFields[i].ToString(builder);
                }
                builder.Append("]");
            }
            if (this.HasGuid())
            {
                builder.Append(", \"Guid\": \"");
                builder.Append(this.Guid);
                builder.Append("\"");
            }
            if (this.HasName())
            {
                builder.Append(", \"Name\": \"");
                builder.Append(this.Name);
                builder.Append("\"");
            }
            if (this.HasTitle())
            {
                builder.Append(", \"Title\": \"");
                builder.Append(this.Title);
                builder.Append("\"");
            }
            if (this.HasDescription())
            {
                builder.Append(", \"Description\": \"");
                builder.Append(this.Description);
                builder.Append("\"");
            }
            builder.Append("}");
            return builder;
        }
        
        /// <summary>
        /// Returns a string that represents the current object.
        /// <returns>A string that represents the current object.</returns>
        /// </summary>
        public override string ToString()
        {
            return this.ToString(new System.Text.StringBuilder()).ToString();
        }
        #endregion
    }
}
