//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using EPAM.Deltix.Timebase.Messages;
using com.epam.deltix.containers.;
using System;


namespace EPAM.Deltix.Timebase.Messages.Service
{
    
    
    [OldElementName(Value="deltix.qsrv.hf.pub.ErrorMessage")]
    [SchemaElement(Name="com.epam.deltix.timebase.messages.service.ErrorMessage", Title="Error Message", Description=null)]
    [SchemaGuid(Value=ErrorMessage.DescriptorGuid)]
    public class ErrorMessage : InstrumentMessage
    {
        
        public const String DescriptorGuid = "SYS:ErrorMessage:2";
        
        private MutableString _errorType = null;
        
        private Int64 _seqNum = 0;
        
        private ErrorLevel _level = ((ErrorLevel)(TypeConstants.EnumNull));
        
        private MutableString _messageText = null;
        
        private MutableString _details = null;
        
        /// <summary>
        /// Creates an instance of ErrorMessage object.
        /// </summary>
        public ErrorMessage()
        {
        }
        
        #region Properties
        [SchemaElement(Name="errorType", Title="ErrorType", Description=null)]
        public virtual MutableString ErrorType
        {
            get
            {
                return this._errorType;
            }
            set
            {
                this._errorType = value;
            }
        }
        
        [SchemaElement(Name="seqNum", Title="Sequence Number", Description=null)]
        public virtual Int64 SeqNum
        {
            get
            {
                return this._seqNum;
            }
            set
            {
                this._seqNum = value;
            }
        }
        
        [SchemaElement(Name="level", Title="Error Level", Description=null)]
        public virtual ErrorLevel Level
        {
            get
            {
                return this._level;
            }
            set
            {
                this._level = value;
            }
        }
        
        [SchemaElement(Name="messageText", Title="Text", Description=null)]
        public virtual MutableString MessageText
        {
            get
            {
                return this._messageText;
            }
            set
            {
                this._messageText = value;
            }
        }
        
        [SchemaElement(Name="details", Title="Details", Description=null)]
        public virtual MutableString Details
        {
            get
            {
                return this._details;
            }
            set
            {
                this._details = value;
            }
        }
        #endregion
        
        #region Property Helpers
        /// <summary>
        /// Flag that indicates whether property ErrorType has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasErrorType()
        {
            return (this._errorType != null);
        }
        
        /// <summary>
        /// Sets null to ErrorType property.
        /// </summary>
        public void NullifyErrorType()
        {
            this._errorType = null;
        }
        
        /// <summary>
        /// Flag that indicates whether property SeqNum has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasSeqNum()
        {
            return (this._seqNum != TypeConstants.Int64Null);
        }
        
        /// <summary>
        /// Sets null to SeqNum property.
        /// </summary>
        public void NullifySeqNum()
        {
            this._seqNum = TypeConstants.Int64Null;
        }
        
        /// <summary>
        /// Flag that indicates whether property Level has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasLevel()
        {
            return (this._level != ((ErrorLevel)(TypeConstants.EnumNull)));
        }
        
        /// <summary>
        /// Sets null to Level property.
        /// </summary>
        public void NullifyLevel()
        {
            this._level = ((ErrorLevel)(TypeConstants.EnumNull));
        }
        
        /// <summary>
        /// Flag that indicates whether property MessageText has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasMessageText()
        {
            return (this._messageText != null);
        }
        
        /// <summary>
        /// Sets null to MessageText property.
        /// </summary>
        public void NullifyMessageText()
        {
            this._messageText = null;
        }
        
        /// <summary>
        /// Flag that indicates whether property Details has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasDetails()
        {
            return (this._details != null);
        }
        
        /// <summary>
        /// Sets null to Details property.
        /// </summary>
        public void NullifyDetails()
        {
            this._details = null;
        }
        #endregion
        
        #region Standard Methods
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public virtual bool Equals(ErrorMessage obj)
        {
            if ((obj == null))
            {
                return false;
            }
            if (((this.ErrorType != null) 
                        && (obj.ErrorType != null)))
            {
                if ((this.ErrorType.Equals(obj.ErrorType) != true))
                {
                    return false;
                }
            }
            else
            {
                if ((this.ErrorType != obj.ErrorType))
                {
                    return false;
                }
            }
            if ((this.SeqNum != obj.SeqNum))
            {
                return false;
            }
            if ((this.Level != obj.Level))
            {
                return false;
            }
            if (((this.MessageText != null) 
                        && (obj.MessageText != null)))
            {
                if ((this.MessageText.Equals(obj.MessageText) != true))
                {
                    return false;
                }
            }
            else
            {
                if ((this.MessageText != obj.MessageText))
                {
                    return false;
                }
            }
            if (((this.Details != null) 
                        && (obj.Details != null)))
            {
                if ((this.Details.Equals(obj.Details) != true))
                {
                    return false;
                }
            }
            else
            {
                if ((this.Details != obj.Details))
                {
                    return false;
                }
            }
            return base.Equals(obj);
        }
        
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public override bool Equals(object obj)
        {
            if ((typeof(ErrorMessage).IsInstanceOfType(obj) == false))
            {
                return false;
            }
            return this.Equals(((ErrorMessage)(obj)));
        }
        
        /// <summary>
        /// Calculates a hash code for the current object.
        /// <returns>A hash code for the current object.</returns>
        /// </summary>
        public override int GetHashCode()
        {
            unchecked
            {
            int hash = ((int)(2166136261u));
            if ((this.ErrorType == null))
            {
                hash = ((hash * 16777619) 
                            + 0);
            }
            else
            {
                hash = ((hash * 16777619) 
                            + this.ErrorType.GetHashCode());
            }
            hash = ((hash * 16777619) 
                        + this.SeqNum.GetHashCode());
            hash = ((hash * 16777619) 
                        + this.Level.GetHashCode());
            if ((this.MessageText == null))
            {
                hash = ((hash * 16777619) 
                            + 0);
            }
            else
            {
                hash = ((hash * 16777619) 
                            + this.MessageText.GetHashCode());
            }
            if ((this.Details == null))
            {
                hash = ((hash * 16777619) 
                            + 0);
            }
            else
            {
                hash = ((hash * 16777619) 
                            + this.Details.GetHashCode());
            }
            return ((hash * 16777619) 
                        + base.GetHashCode());
            }
        }
        
        /// <summary>
        /// Appends an object state to a given StringBuilder in a form of JSON.
        /// <returns>A StringBuilder that was used to append the object to.</returns>
        /// </summary>
        public override System.Text.StringBuilder ToString(System.Text.StringBuilder builder)
        {
            builder.Append("{ \"$type\":  \"ErrorMessage\"");
            if (this.HasErrorType())
            {
                builder.Append(", \"ErrorType\": \"");
                builder.Append(this.ErrorType);
                builder.Append("\"");
            }
            if (this.HasSeqNum())
            {
                builder.Append(", \"SeqNum\": ");
                builder.Append(this.SeqNum);
            }
            if (this.HasLevel())
            {
                builder.Append(", \"Level\": \"");
                builder.Append(this.Level);
                builder.Append("\"");
            }
            if (this.HasMessageText())
            {
                builder.Append(", \"MessageText\": \"");
                builder.Append(this.MessageText);
                builder.Append("\"");
            }
            if (this.HasDetails())
            {
                builder.Append(", \"Details\": \"");
                builder.Append(this.Details);
                builder.Append("\"");
            }
            if (this.HasTimeStampMs())
            {
                builder.Append(", \"TimeStampMs\": \"");
                builder.Append(this.TimeStampMs);
                builder.Append("\"");
            }
            if (this.HasNanoTime())
            {
                builder.Append(", \"NanoTime\": \"");
                builder.Append(this.NanoTime);
                builder.Append("\"");
            }
            if (this.HasSymbol())
            {
                builder.Append(", \"Symbol\": \"");
                builder.Append(this.Symbol);
                builder.Append("\"");
            }
            builder.Append("}");
            return builder;
        }
        
        /// <summary>
        /// Returns a string that represents the current object.
        /// <returns>A string that represents the current object.</returns>
        /// </summary>
        public override string ToString()
        {
            return this.ToString(new System.Text.StringBuilder()).ToString();
        }
        #endregion
    }
}
