//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using EPAM.Deltix.Timebase.Messages;
using com.epam.deltix.containers.;
using System;


namespace EPAM.Deltix.Timebase.Messages.Service
{
    
    
    /// <summary>
    /// Special transient message that signals active stream consumers that their stream has been truncated
    /// Used for advanced stream monitoring.
    /// see also "SelectionOptions.VersionTracking"
    /// </summary>
    [OldElementName(Value="deltix.qsrv.hf.pub.StreamTruncatedMessage")]
    [SchemaElement(Name="com.epam.deltix.timebase.messages.service.StreamTruncatedMessage", Title="Stream Truncated Message", Description=null)]
    public class StreamTruncatedMessage : SystemMessage
    {
        
        private MutableString _instruments = null;
        
        private DateTime _truncateTime = TypeConstants.TimestampNull;
        
        private Int64 _version = TypeConstants.Int64Null;
        
        /// <summary>
        /// Creates an instance of StreamTruncatedMessage object.
        /// </summary>
        public StreamTruncatedMessage()
        {
        }
        
        #region Properties
        [SchemaElement(Name="instruments", Title="Instruments", Description=null)]
        public virtual MutableString Instruments
        {
            get
            {
                return this._instruments;
            }
            set
            {
                this._instruments = value;
            }
        }
        
        /// <summary>
        /// Time of truncation in nanoseconds
        /// </summary>
        [SchemaElement(Name="truncateTime", Title="Truncated Time", Description=null)]
        public virtual DateTime TruncateTime
        {
            get
            {
                return this._truncateTime;
            }
            set
            {
                this._truncateTime = value;
            }
        }
        
        [SchemaElement(Name="version", Title="Version", Description=null)]
        public virtual Int64 Version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        #endregion
        
        #region Property Helpers
        /// <summary>
        /// Flag that indicates whether property Instruments has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasInstruments()
        {
            return (this._instruments != null);
        }
        
        /// <summary>
        /// Sets null to Instruments property.
        /// </summary>
        public void NullifyInstruments()
        {
            this._instruments = null;
        }
        
        /// <summary>
        /// Flag that indicates whether property TruncateTime has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasTruncateTime()
        {
            return (this._truncateTime != TypeConstants.TimestampNull);
        }
        
        /// <summary>
        /// Sets null to TruncateTime property.
        /// </summary>
        public void NullifyTruncateTime()
        {
            this._truncateTime = TypeConstants.TimestampNull;
        }
        
        /// <summary>
        /// Flag that indicates whether property Version has an assigned value.
        /// <returns>true if property has an assigned value, false otherwise.</returns>
        /// </summary>
        public bool HasVersion()
        {
            return (this._version != TypeConstants.Int64Null);
        }
        
        /// <summary>
        /// Sets null to Version property.
        /// </summary>
        public void NullifyVersion()
        {
            this._version = TypeConstants.Int64Null;
        }
        #endregion
        
        #region Standard Methods
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public virtual bool Equals(StreamTruncatedMessage obj)
        {
            if ((obj == null))
            {
                return false;
            }
            if (((this.Instruments != null) 
                        && (obj.Instruments != null)))
            {
                if ((this.Instruments.Equals(obj.Instruments) != true))
                {
                    return false;
                }
            }
            else
            {
                if ((this.Instruments != obj.Instruments))
                {
                    return false;
                }
            }
            if ((this.TruncateTime != obj.TruncateTime))
            {
                return false;
            }
            if ((this.Version != obj.Version))
            {
                return false;
            }
            return base.Equals(obj);
        }
        
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public override bool Equals(object obj)
        {
            if ((typeof(StreamTruncatedMessage).IsInstanceOfType(obj) == false))
            {
                return false;
            }
            return this.Equals(((StreamTruncatedMessage)(obj)));
        }
        
        /// <summary>
        /// Calculates a hash code for the current object.
        /// <returns>A hash code for the current object.</returns>
        /// </summary>
        public override int GetHashCode()
        {
            unchecked
            {
            int hash = ((int)(2166136261u));
            if ((this.Instruments == null))
            {
                hash = ((hash * 16777619) 
                            + 0);
            }
            else
            {
                hash = ((hash * 16777619) 
                            + this.Instruments.GetHashCode());
            }
            hash = ((hash * 16777619) 
                        + this.TruncateTime.GetHashCode());
            hash = ((hash * 16777619) 
                        + this.Version.GetHashCode());
            return ((hash * 16777619) 
                        + base.GetHashCode());
            }
        }
        
        /// <summary>
        /// Appends an object state to a given StringBuilder in a form of JSON.
        /// <returns>A StringBuilder that was used to append the object to.</returns>
        /// </summary>
        public override System.Text.StringBuilder ToString(System.Text.StringBuilder builder)
        {
            builder.Append("{ \"$type\":  \"StreamTruncatedMessage\"");
            if (this.HasInstruments())
            {
                builder.Append(", \"Instruments\": \"");
                builder.Append(this.Instruments);
                builder.Append("\"");
            }
            if (this.HasTruncateTime())
            {
                builder.Append(", \"TruncateTime\": \"");
                builder.Append(this.TruncateTime);
                builder.Append("\"");
            }
            if (this.HasVersion())
            {
                builder.Append(", \"Version\": ");
                builder.Append(this.Version);
            }
            if (this.HasTimeStampMs())
            {
                builder.Append(", \"TimeStampMs\": \"");
                builder.Append(this.TimeStampMs);
                builder.Append("\"");
            }
            if (this.HasNanoTime())
            {
                builder.Append(", \"NanoTime\": \"");
                builder.Append(this.NanoTime);
                builder.Append("\"");
            }
            if (this.HasSymbol())
            {
                builder.Append(", \"Symbol\": \"");
                builder.Append(this.Symbol);
                builder.Append("\"");
            }
            builder.Append("}");
            return builder;
        }
        
        /// <summary>
        /// Returns a string that represents the current object.
        /// <returns>A string that represents the current object.</returns>
        /// </summary>
        public override string ToString()
        {
            return this.ToString(new System.Text.StringBuilder()).ToString();
        }
        #endregion
    }
}
