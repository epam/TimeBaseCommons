/*
  Copyright 2021 EPAM Systems, Inc

  See the NOTICE file distributed with this work for additional information
  regarding copyright ownership. Licensed under the Apache License,
  Version 2.0 (the "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
  License for the specific language governing permissions and limitations under
  the License.
 */
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using com.epam.deltix.containers.;
using System;
using System.Collections.Generic;


namespace EPAM.Deltix.Timebase.Messages
{
    
    
    /// <summary>
    /// Defines a field type in Timebase schema.
    /// </summary>
    [AttributeUsage((System.AttributeTargets.Field | System.AttributeTargets.Property), AllowMultiple=false)]
    public class SchemaTypeAttribute : System.Attribute
    {
        
        private String _encoding = null;
        
        private Boolean _isNullable = true;
        
        private SchemaDataType _dataType = SchemaDataType.Default;
        
        private String _minimum = null;
        
        private String _maximum = null;
        
        private Type[] _nestedTypes = new Type[0];
        
        public SchemaTypeAttribute()
        {
        }
        
        #region Properties
        /// <summary>
        /// Defines Timebase encoding for the field.
        /// </summary>
        public String Encoding
        {
            get
            {
                return this._encoding;
            }
            set
            {
                this._encoding = value;
            }
        }
        
        /// <summary>
        /// Defines if field allows null value to be assigned to it.
        /// </summary>
        public Boolean IsNullable
        {
            get
            {
                return this._isNullable;
            }
            set
            {
                this._isNullable = value;
            }
        }
        
        /// <summary>
        /// Defines schema data type of the field.
        /// If not defined, default mapping is used.
        /// </summary>
        public SchemaDataType DataType
        {
            get
            {
                return this._dataType;
            }
            set
            {
                this._dataType = value;
            }
        }
        
        /// <summary>
        /// Defines minimum value of the field. (For numeric types only)
        /// </summary>
        public String Minimum
        {
            get
            {
                return this._minimum;
            }
            set
            {
                this._minimum = value;
            }
        }
        
        /// <summary>
        /// Defines maximum value of the field. (For numeric types only)
        /// </summary>
        public String Maximum
        {
            get
            {
                return this._maximum;
            }
            set
            {
                this._maximum = value;
            }
        }
        
        /// <summary>
        /// Defines a set of types that might reside in this field.
        /// </summary>
        public Type[] NestedTypes
        {
            get
            {
                return this._nestedTypes;
            }
            set
            {
                this._nestedTypes = value;
            }
        }
        #endregion
    }
}