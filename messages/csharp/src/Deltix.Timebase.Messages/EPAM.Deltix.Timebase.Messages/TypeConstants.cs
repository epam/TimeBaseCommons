//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using EPAM.Deltix.DFP;
using EPAM.Deltix.Timebase.Messages;
using System;


namespace EPAM.Deltix.Timebase.Messages
{
    
    
    public class TypeConstants
    {
        
        public const SByte BooleanNull = -1;
        
        public const SByte BooleanFalse = 0;
        
        public const SByte BooleanTrue = 1;
        
        public const SByte Int8Null = SByte.MinValue;
        
        public const Int16 Int16Null = Int16.MinValue;
        
        public const Int32 Int32Null = Int32.MinValue;
        
        public const Int64 Int48Null = -140737488355328;
        
        public const Int64 Int64Null = Int64.MinValue;
        
        public const Int32 PintervalNull = 0;
        
        public const Int64 ExchangeNull = TypeConstants.Int64Null;
        
        public const Int64 ExchangeMaxLen = 10;
        
        public const Single Ieee32Null = Single.NaN;
        
        public const Double Ieee64Null = Double.NaN;
        
        public static Decimal64 DecimalNull = Decimal64.Null;
        
        public const Int32 TimeOfDayNull = -1;
        
        public static TimeSpan DurationNull = TimeSpan.MinValue;
        
        public static DateTime TimestampUnknown = DateTime.MinValue;
        
        public static DateTime TimestampNull = DateTime.MinValue;
        
        public const Int32 TimestampMaxLen = 10;
        
        public const Int32 BinaryUnlimitedSize = Int32.MinValue;
        
        public const Int32 BinaryMinCompression = 0;
        
        public const Int32 BinaryMaxCompression = 9;
        
        public const Int32 EnumNull = -1;
        
        public const Int64 EnumNullCode = -1;
        
        public const Int64 AlphanumericNull = Int64.MinValue;
        
        /// <summary>
        /// Creates an instance of TypeConstants object.
        /// </summary>
        public TypeConstants()
        {
        }
        
        #region Standard Methods
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public virtual bool Equals(TypeConstants obj)
        {
            if ((obj == null))
            {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        /// </summary>
        public override bool Equals(object obj)
        {
            if ((typeof(TypeConstants).IsInstanceOfType(obj) == false))
            {
                return false;
            }
            return this.Equals(((TypeConstants)(obj)));
        }
        
        /// <summary>
        /// Calculates a hash code for the current object.
        /// <returns>A hash code for the current object.</returns>
        /// </summary>
        public override int GetHashCode()
        {
            unchecked
            {
            int hash = ((int)(2166136261u));
            return hash;
            }
        }
        
        /// <summary>
        /// Appends an object state to a given StringBuilder in a form of JSON.
        /// <returns>A StringBuilder that was used to append the object to.</returns>
        /// </summary>
        public virtual System.Text.StringBuilder ToString(System.Text.StringBuilder builder)
        {
            builder.Append("{ \"$type\":  \"TypeConstants\"");
            builder.Append("}");
            return builder;
        }
        
        /// <summary>
        /// Returns a string that represents the current object.
        /// <returns>A string that represents the current object.</returns>
        /// </summary>
        public override string ToString()
        {
            return this.ToString(new System.Text.StringBuilder()).ToString();
        }
        #endregion
    }
}
