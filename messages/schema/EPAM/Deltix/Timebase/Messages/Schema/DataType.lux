/*
  Copyright 2021 EPAM Systems, Inc

  See the NOTICE file distributed with this work for additional information
  regarding copyright ownership. Licensed under the Apache License,
  Version 2.0 (the "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
  License for the specific language governing permissions and limitations under
  the License.
 */
namespace EPAM.Deltix.Timebase.Messages.Schema;
option JavaPackage = "com.epam.deltix.timebase.messages.schema";

import EPAM.Deltix.Timebase.Messages.*;

/// This is a base class for schema data types.
[Abstract]
[SchemaElement(Name = "com.epam.deltix.timebase.messages.schema.DataType", Title = "DataType")]
[GenerateReadOnlyInterface][GenerateReadWriteInterface]
class DataType {

    /// Binary representation (encoding) of a field in database and protocol.
    [SchemaElement]
    [SchemaType(IsNullable=true)]
    Text? Encoding;

    /// True, if schema design allows the field to be nullable.
    [SchemaElement]
    [SchemaType(IsNullable=false)]
    Boolean IsNullable;
}

/// This is a base class for numeric data types.
[Abstract]
[SchemaElement(Name = "com.epam.deltix.timebase.messages.schema.IntegralDataType", Title = "IntegralDataType")]
[GenerateReadOnlyInterface][GenerateReadWriteInterface]
class IntegralDataType : DataType {

    /// String definition for minimum constraint.
    [SchemaElement]
    [SchemaType(IsNullable=true)]
    Text? MinValue;

    /// String definition for maximum constraint.
    [SchemaElement]
    [SchemaType(IsNullable=true)]
    Text? MaxValue;
}

/// Schema definition of array data type.
[SchemaElement(Name = "com.epam.deltix.timebase.messages.schema.ArrayDataType", Title = "ArrayDataType")]
[GenerateReadOnlyInterface][GenerateReadWriteInterface]
class ArrayDataType : DataType {

    /// Array element data type.
    [SchemaElement]
    [SchemaType(IsNullable=false, DataType = SchemaDataType.OBJECT, NestedTypes = {
        //typeof(ArrayDataType),
        typeof(BinaryDataType),
        typeof(BooleanDataType),
        typeof(CharDataType),
        typeof(ClassDataType),
        typeof(DateTimeDataType),
        typeof(EnumDataType),
        typeof(FloatDataType),
        typeof(IntegerDataType),
        typeof(TimeOfDayDataType),
        typeof(VarcharDataType)
    })]
    DataType ElementType;
}

/// Schema definition of binary data type.
[SchemaElement(Name = "com.epam.deltix.timebase.messages.schema.BinaryDataType", Title = "BinaryDataType")]
[GenerateReadOnlyInterface][GenerateReadWriteInterface]
class BinaryDataType : DataType {

    /// Maximum field length in bytes.
    [SchemaElement]
    [SchemaType(IsNullable=true)]
    UInt32? MaxSize;

    /// Compression level for binary data.
    [SchemaElement]
    [SchemaType(IsNullable=true, Minimum="0", Maximum="9")]
    UInt16? CompressionLevel;
}

/// Schema definition of boolean data type.
[SchemaElement(Name = "com.epam.deltix.timebase.messages.schema.BooleanDataType", Title = "BooleanDataType")]
[GenerateReadOnlyInterface][GenerateReadWriteInterface]
class BooleanDataType : DataType {
}

/// Schema definition of char data type.
[SchemaElement(Name = "com.epam.deltix.timebase.messages.schema.CharDataType", Title = "CharDataType")]
[GenerateReadOnlyInterface][GenerateReadWriteInterface]
class CharDataType : DataType {
}

/// Schema definition of class data type.
[SchemaElement(Name = "com.epam.deltix.timebase.messages.schema.ClassDataType", Title = "ClassDataType")]
[GenerateReadOnlyInterface][GenerateReadWriteInterface]
class ClassDataType : DataType {

    /// Definitions for nested schema classes.
    [SchemaElement]
    [SchemaArrayType(IsNullable = false, IsElementNullable = false,
        ElementTypes = { typeof(ClassDescriptorRef) })]
    List<ClassDescriptorRef> TypeDescriptors;
}

/// Schema definition of date-time data type.
[SchemaElement(Name = "com.epam.deltix.timebase.messages.schema.DateTimeDataType", Title = "DateTimeDataType")]
[GenerateReadOnlyInterface][GenerateReadWriteInterface]
class DateTimeDataType : DataType {
}

/// Schema definition of enum data type.
[SchemaElement(Name = "com.epam.deltix.timebase.messages.schema.EnumDataType", Title = "EnumDataType")]
[GenerateReadOnlyInterface][GenerateReadWriteInterface]
class EnumDataType : DataType {

    /// Definition for enumeration class.
    [SchemaElement]
    [SchemaType(IsNullable=false, DataType = SchemaDataType.OBJECT, NestedTypes = {
        typeof(ClassDescriptorRef)
    })]
    ClassDescriptorRef TypeDescriptor;
}

/// Schema definition of float data type.
[SchemaElement(Name = "com.epam.deltix.timebase.messages.schema.FloatDataType", Title = "FloatDataType")]
[GenerateReadOnlyInterface][GenerateReadWriteInterface]
class FloatDataType : IntegralDataType {

    /// Scale.
    [SchemaElement]
    [SchemaType(IsNullable=true)]
    UInt16? Scale;
}

/// Schema definition of integer data type.
[SchemaElement(Name = "com.epam.deltix.timebase.messages.schema.IntegerDataType", Title = "IntegerDataType")]
[GenerateReadOnlyInterface][GenerateReadWriteInterface]
class IntegerDataType : IntegralDataType {
}

/// Schema definition of time-of-day data type.
[SchemaElement(Name = "com.epam.deltix.timebase.messages.schema.TimeOfDayDataType", Title = "TimeOfDayDataType")]
[GenerateReadOnlyInterface][GenerateReadWriteInterface]
class TimeOfDayDataType : DataType {
}

/// Schema definition of varchar data type.
[SchemaElement(Name = "com.epam.deltix.timebase.messages.schema.VarcharDataType", Title = "VarcharDataType")]
[GenerateReadOnlyInterface][GenerateReadWriteInterface]
class VarcharDataType : DataType {

    /// True, if field allows line breaks.
    [SchemaElement]
    [SchemaType(IsNullable=true)]
    Boolean IsMultiline;

    /// Encoding type.
    [SchemaElement]
    [SchemaType(IsNullable=true)]
    UInt32? EncodingType;

    /// Length.
    [SchemaElement]
    [SchemaType(IsNullable=true)]
    UInt32? Length;
}